respondent_id,duration_of_experiment,which_group,exp_coding,exp_working_java,exp_finding_vuln,path_lines,path_lines_correctness,path_lines_type,path_motivation,path_difficulty,path_confidence,userinjection_lines,userinjection_lines_correctness,userinjection_lines_type,userinjection_motivation,userinjection_difficulty,userinjection_confidence,xss_lines,xss_lines_correctness,xss_lines_type,xss_motivation,xss_difficulty,xss_confidence,dos_lines,dos_lines_correctness,dos_lines_type,dos_motivation,dos_difficulty,dos_confidence,familiar_java,familiar_vuln,proc_understand,proc_time,proc_training,avg_correctness_slice,avg_correctness_full
R_6VjPVPsjubWNXHF,2564,Group5,Only as a Teaching Assistant,As part of University projects,As part of University projects,253;675;926,0.0,full,"253; No catch if the name is NULL. 675; Does not have any case that the name is NULL, might cause errors. 926; There is no case if either name or path is NULL",4,3,59;83,0.2,slice,59; No case for if username is NULL. 83; No case if the credentials is NULL.,3,4,85; ,0.0,slice,85; No case if there is NULL value for the string action,3,4,448;,0.0,full,448; there is nothing that closes the socket.,4,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.1,0.0
R_2xzP3qObkA69NAD,2687,Group2,Yes but in another programming language at a Company,Developed several projects using Java,As part of University projects,91,0.0,slice,"The reason for the vulnerability is that there is a possibility for a malicious attacker to craft a path such that it can still point to an unexpected directory (after removing the slashes), and access a resource it may not be authorized to.",2,4,151;153,0.2,full,An attacker can pass in a null string and see the error output which may contain information about what Principal.getPassword() returns,3,3,89,0.0,slice,"I could provide a link to a third part website in the action, which can, for example, pull malicious code from that server, and run it locally. It can also be used to direct visitors of that website to an unknown third-party website.",4,2,415,0.0,full,You can try to write too many bytes of data into the buffer causing it to overflow and point the stack pointer to anywhere you wish.,5,1,Agree,Neither-Agree-nor-Disagree,Disagree,Agree,Strongly disagree,0.0,0.1
R_32Y1Hn1rVUXOZzP,3708,Group1,Yes but in another programming language at a Company,No experience,No experience,348;349,0.0,full,"Within the getRealPath function, no validation of the path parameter is done. Though this function does not directly allow the caller to read the file, it does give them information about which files exist outside the virtual container.",4,3,62;84;,0.2,slice,"Because the try in the digest function is not matched with a catch, the plain credentials are returned in case of failure. The authenticate function does not handle this so this error may propagate, disclosing the credentials string.",2,4,348;349;350;351;352;353;354,0.0,full,"In each of these lines, an optional attribute is added to the tagWriter. Each of these attributes are manually settable and not validated. This opens up possibilities for attackers to include malicious data like XSS",3,4,137;193;196;228;,0.0,slice,"The buffer buf is filled throughout the function. This only ends when specific characters are seen. This leaves the opportunity to send a massive header file that does not have any of these special abort characters. Eventually, the memory runs out.",4,2,Disagree,Disagree,Strongly agree,Strongly agree,Disagree,0.1,0.0
R_2vdWuXgTSThhtKg,3794,Group2,Yes but in another programming language at a Company,As part of University projects,No experience,75;120,0.07692307692307693,slice,"At line 75, the path is passed to the code as request. The path is normalized but the normalized substring is created from multiple string operations. ",2,3,103;113;144;151;323;327;331,0.4,full,"The code takes various information from the client, including username and pathname to retrieve a file which is then pushed to the database. This allows user injections if unchecked.",2,4,73;86;87;89;91,0.25,slice,The code can be vulnerable when the user configures a servletRelativeAction value as the value is then preprended with paths.,2,4,105;118;184;253;274;325;327;328;330;378;398;399;400;426;546;744;745;810,0.0,full,"Based on user input, the length of buffer streams are set and modified. The recycle() child function is also recursively called.",3,2,Agree,Agree,Agree,Agree,Agree,0.16346153846153846,0.2
R_3ZNSmOFtlGu0hFO,3947,Group3,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,76;81;91;95,0.23076923076923078,slice,"Although the code provide a sanitizer in the normalizer, it still ignore some cases, for example, if the path end with ""/.."". The normalizer cannot find it as it only detects ""/../"".",4,2,62;87;90,0.6,slice,"The string credentials can be null, and an exception will be shown on the user side, thus cause information disclosure",2,4,343;371;376,0.0,full,The tagWriter is not validated and may set the attribute value to be some malicious scripts.,2,4,398;426;433;438;811,0.0,full,There is no limitation on expanding the buffer size of pos and nread. The server may be killed when the memory is out. ,2,4,Agree,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.41538461538461535,0.0
R_5lnpT58nAAb4f8g,3943,Group4,Yes in Java at a Company,Several years of professional experience with Java,Several years of professional experience outside of university,480;483;928;930,0.0,full,"The getJNDIUri method uses two strings, a path which is normalized to prevent path traversal, and a hostname which is taken from the HTTP request at line 480 context.getParent().getName(). As the hostname is attacker controlled path traversal happen.",3,4,151;287;301,0.4,full,"Within the authenticate method the credentials string may be of value null, and thus an exception will be thrown within the digest method and will return null. The return value of null will execute equals thus causing an exception and info leakage.",3,4,66;69;70,0.0,slice,The code take the potentially user controlled action variable and passes it onwards to the processAction method without prior sanitization thus possibly leading to XSS.,3,4,51;121;235;,0.3333333333333333,slice,"First the header loop runs for as many headers as found within the request (thus user controllable). Then, the header is parsed and added to the headers map, for an unlimited amount of headers thus potentially causing DoS.",2,4,Agree,Agree,Disagree,Agree,Disagree,0.16666666666666666,0.2
R_4NgoXAsj4ykMT4h,3670,Group3,Not really,Developed several projects using Java,Find vulnerabilities outside university,76,0.07692307692307693,slice,"the normalize() function didn't check if the given path is valid, may cause redirect attack",2,3,59,0.2,slice,the code get username from outside and doesn't check if the username is valid or contain attack code. ,2,3,364;365;429;437;451,0.25,full,"the code didn't check the inputName of getMethodParameter() is valid and safe, may cause XSS attack. In line 429 and 451, the requestUri is not checked or encoded, may contain attack code or information.",3,2,475;508,0.0,full,"when pos pointer moves, the buffer size is not checked, so it can exceed the buffer size or keep the program reading the header",4,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.13846153846153847,0.125
R_3ez9pWg1fb4UuBD,4106,Group5,Yes but in another programming language at a Company,Developed project(s) using Java outside University,No experience,462,0.0,full,path and name of all the jar files can be exploited here as there is a hard coded file path is mentioned.,2,4,59,0.2,slice,input username is not validated before using it in line no 59. It can be a code instead of real user name,2,4,73,0.25,slice,RequestURI is not validated before calling and therefore it may cause cross-site scripting vulnerability,4,4,580,0.0,full,"This while loop might run infinitely causing memory outage. The ""break"" statement might never get executed. ",5,3,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.225,0.0
R_3Y2NHgEILEl8upj,4255,Group2,Yes in Java at a Company,Developed project(s) using Java outside University,As part of University projects,76;120,0.15384615384615385,slice,"The normalize function does not properly take out sequences of /../, which allows path traversal. ",4,2,151;301,0.2,full,"Password is compared case-insensitive even though there is no guarantee that when hasMessageDigest() returns true the credentials are converted to hex, since the digest() function may return the original string if the hex function failed.",4,1,73;74;75;76,1.0,slice,"The request URI is used to determine the ""action"" field of a &lt;form&gt; that this web server will return to a user. By specifying javascript in the request URI we can compromise other users by sending them the link (and having them submit the form).",2,4,237;778;782,0.0,full,"There is no limit on how much data we can send to the server and the array ""buf"" will keep expanding to accommodate it. At any of the while loops that calls readSocket we can perform a DOS attack by sending enough data to fill the server's memory.",2,4,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.5769230769230769,0.1
R_8wyQcvpYBK02KVV,4735,Group3,Not really,No experience,No experience,76;108,0.15384615384615385,slice,"For 76 and 108, the input string might be a script which will do something bad.
",3,5,59;62,0.4,slice,it doesn't check or sanitize the input,3,5,466;468;480;482,0.0,full,They did not check or sanitize the input before using it in other function,3,4,103; 747,0.0,full,"It doesn't check the size of the numbers, it may overflow ",3,4,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Agree,Disagree,0.27692307692307694,0.0
R_4qmhEq35UDKr8nM,5027,Group2,Not really,No experience,No experience,76;107;114,0.15384615384615385,slice,"supposing that the weakness is in normalize, the code only finds in the path the indexes of /../ so if I have a path ""../a/../b"" the first ../ would go undetected. Maybe there is some other logical error with the indexing not quite sure (need tests).",3,3,287,0.2,full,may throw null exception,3,4,70;85;85;87;88;89;90;92,0.0,slice,"Every single input action by the user, as long as it is a text, gets processed. He can plant html or scripts easily.",2,4,"454;462,491",0.3333333333333333,full,We have a loop controlled by a user. He could send a really long header to kill the process or lower the performances.,2,3,Neither-Agree-nor-Disagree,Agree,Agree,Strongly agree,Strongly agree,0.07692307692307693,0.26666666666666666
R_21vKESufxLoM9S6,5260,Group1,Only as a Teaching Assistant,No experience,As part of University projects,361;368;458;505;854,0.15384615384615385,full,"line 361, the function is getting path as an input from the user. Line 368 and 458 and 505 and 543 it seems like the input is sanitized using ""normalize"" but in line 854 it tries to Resolve occurrences of /../ but maybe the input has /./.././",4,1,59;86,0.2,slice,"59 it is getting username for the user without any santinization, 86 if the user do not enter anything for credentials",4,2,427;426;435,0.0,full,426 & 427 getting request to outside. 435 concatination,4,2,56;51,0.3333333333333333,slice,if the header is too big 51 will continue without exception,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.26666666666666666,0.07692307692307693
R_7rdJdfY8zlB9TXP,5326,Group4,Only as a Teaching Assistant,As part of University projects,As part of University projects,208;348;481;694;753,0.0,full,"In line 208, the program uses ''uri'' input without being verified.
in line 348, 'path' is used to create a new file without being verified/normalized.
In line 481,694 and 753, the try catch pattern may cause DoS.",3,3,151;153;190;195;281,0.2,full,"In line 151 and 153, authentication can be true because the credentials are not checked. 190 and 195 lacks null check, roles can be null. 281 the try catch pair can lead to DoS.",3,3,69;74,0.25,slice,action or requesturi is not checked which may cause injection.,4,3,51,0.3333333333333333,slice,"The loop is controlled by the length of the headers, can lead to a DoS",2,3,Agree,Disagree,Agree,Agree,Agree,0.29166666666666663,0.1
R_2DxfRUKRXjnMMRr,5355,Group1,Yes but in another programming language at a Company,As part of University projects,No experience,543;549;566;854,0.07692307692307693,full,"the normalize function is incorrect. it search '/../' so when the path is ended with .. it won't remove it. If we are using getResourcePaths, which will list the whole folder, files outside the specified folder will be returned",4,1,62;87,0.4,slice,It did not check whether the credential is a null,4,1,347;429;430;468,0.0,full,"the action may be a runtime expression used by the user at line 468, and be returned without being processed.",4,1,151;51,0.3333333333333333,slice,The loop for reading the header depends on the how many headers are there in use's data. a huge amount of headers can bring down the server,4,1,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.3666666666666667,0.038461538461538464
R_284dImTUDG2EBvb,5504,Group6,Only as a Teaching Assistant,Developed several projects using Java,As part of University projects,75;76;91;93;95,0.15384615384615385,slice,"The getRequestDispatcher() function is vulnerable. Because the order of executing, it first executes the normalize() function. The input string can contains more than one ""/../"" and other chars, which can cause path traversal vulnerabilities.",3,2,142;151;153;159;160;162;163,0.2,full,"The authenticate() function is vulnerable. It is using digest() and returns principal. Besides, the username is logged no matter the value of variable validated.",2,3,425;426;441;446;447;451,0.5,full,The function resolveAction() is vulnerable. Strings in uri may contain executed code strings.,4,2,47;49;50;51;68;237,0.6666666666666666,slice,"The parseHeaders() function contains DOS vulnerability. The parseHeader() may always return a status of HeaderParseStatus.HAVE_MORE_HEADERS. In this case, the do-while loop will never stop. ",3,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.41025641025641024,0.35
R_6P1oxpzTFDFmN1H,4940,Group6,Not really,As part of University projects,As part of University projects,114,0.07692307692307693,slice,"it overlooks the case that there may not be ""/"" after '/..' so it wont normalized cases like /a/b/../../..",2,4,190,0.0,full,it did not check the substring between 2 commas,3,3,429,0.0,full,it does not check whether action is legal or not,4,2,83,0.0,slice," User-controlled values define the size of allocated  memory, arrays or buffers",4,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Strongly agree,Disagree,Neither-Agree-nor-Disagree,0.038461538461538464,0.0
R_5Qc0OIbbFFPUXts,6526,Group6,Not really,As part of University projects,As part of University projects,95;117,0.07692307692307693,slice,"Inside the while loop in the function normalize, in line 117 it checks if /../ is at the beginning of the path. However, you could have /safe_dir/../data.db and it would not sanitize it. In line 95, a request is sent with the vulnerable path.",3,4,287;301,0.2,full,"In line 287, getBytes could get a null Exception, which would then return the plain credentials in line 301.",4,3,441;451;466;468;470,0.5,full,"resolveAction() gets the request URI in line 441, which is processed in line 451, but in processAction it gets the request in line 466 and does not check its validity before processing it in line 468 and returning it in line 470",4,3,177;187;201,0.0,slice,A user can control the size of buffer buf because it will keep getting more data until the end of the line,4,3,Agree,Agree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.038461538461538464,0.35
R_5rMs9OjM3AMhLQ2,6633,Group6,Not really,As part of University projects,No experience,119;120,0.15384615384615385,slice,"normalized the path but has error in dealing the case when '/../' appears in the middle of the path.
'",4,3,195;196,0.0,full,Set user name and password without checking,3,2,466;468;480;482,0.0,full,Get request object without checking its validity.,4,3,121;235,0.0,slice,"http header define the size of allocated buffers, may be too large and decrease server’s  performance",3,2,Agree,Neither-Agree-nor-Disagree,Agree,Strongly agree,Neither-Agree-nor-Disagree,0.07692307692307693,0.0
R_2xQuBoINqDS5QB0,6623,Group1,Yes but in another programming language at a Company,As part of University projects,No experience, 93;155;187;200;225;228;231;253;306;367;376;379;417;419;479;645;658;769,0.0,full,"password can be brute force
all the log files from the exceptions can contain vital info.
change the path can give root access


",3,4,62;63;93;83;94,0.2,slice," Path_X Password  hashmap can be brute force, system resources can be gotten from155, and all the excepts that returns log s can reveal vital info",3,4,150;175;184;190;255;382;378;391;420;447;485,0.0,full,most inputs are not validated. the eval page return will environmental variables. and strings can be concatenated. path can be changed from relative to absolute,3,3,56;57;66;78;80;89;95;107;177;178;184;237,0.0,slice,we can add more header outside the block at 95. comments at 66 give glue on what to do. 107 header can be guess,4,3,Disagree,Agree,Agree,Agree,Agree,0.1,0.0
R_4d4EEt0vsGlBTRd,6796,Group4,Yes in Java at a Company,Developed project(s) using Java outside University,As part of University projects,339;348;,0.0,full,The file didn't use normalize() to block a path go outside the boundaries of the current context. The function getRealPath is set to public.,4,3,292;293;300,0.0,full,There are no log.isDebugEnable() or other controller to prevent print error log. These logs maybe contain credentials info.,4,3,74;87;89,0.25,slice,Undefined actions will allow unpredictable injections,4,3,151;168;209;222;,0.0,slice,"If headerParsePos is one of the HEADER_VALUE_START, HEADER_VALUE, HEADER_MULTI_LINE, and a user provides all characters in Constants.SP and Constants.HT, then the loop will never be broken until the buffer is overflow",4,3,Neither-Agree-nor-Disagree,Disagree,Agree,Strongly agree,Disagree,0.125,0.0
R_3aVtz9AHKzUNAsC,6871,Group4,Yes but in another programming language at a Company,As part of University projects,No experience,"348;463;466;468;479;927,928,930",0.0,full,"In line 348, a File object is made without any sanitization checks on path input. In 463,466,468 .jar file paths are whitelisted and be exploted to access other .jar files. In 927,928,930, the path is whitelisted and Uri string is made with no checks",4,4,144;147;195;235;236,0.4,full,"Lines 144,147 only null check on principal, username can be brute-forced to authenticate. Line 195, malicious code can be added to in-memory db as no checks on username and password. Lines 235,236, username can be brute-forced to get the passwords",3,5,66;89,0.0,slice,An action string is processed by processor without any sanitization checks on the action string. Attacker can inject malicious actions in this case.,3,4,235,0.0,slice,The headerValue can setBytes larger than required by increasing the buffer size,3,2,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Strongly agree,Agree,0.0,0.2
R_6rHPwheFYU7MYtA,7048,Group3,Not really,As part of University projects,As part of University projects,76;91;93,0.07692307692307693,slice,"76 uses a custom sanitizing function, 91 and 93 create a URI with user input",2,5,62;84;89,0.2,slice,"password is not checked if it is null, moreover no exceptions are caught in the digest function",2,3,347;445;468,0.0,full,347 append user query string; 445 read user query string; 468 process user query string without any check,3,3,420:491,0.0,full,"420 uncaught exception . 491 there might be a buffer overflow that lead to a DoS, but there where so many lines and I couldnt check the correct functionality of the program",4,1,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.13846153846153847,0.0
R_5wvGVB6iwMitbXC,7094,Group5,Yes but in another programming language at a Company,As part of University projects,No experience,339;348;349,0.0,full,"339 path could contain malicious content. In line 348, this path is used to construct a new path for a file, which at 339 is returned. This could be a different path that could be traversed. not sanitized and normalized",5,4,"58,59,66,67",0.2,slice,"Username from 58 is used to find a principal without being checked at 59, could be an user injection. At 66 is used in log.debug and 67 the wrong principal could be returned",3,4,"66,69,70,89",0.0,slice,"66 user configured action is taken, 69 is used to get a display string(without encoding) and then at 70 it is processed without being processed without being checked at 89 with request could be xss",3,3,148;98;103;475,0.0,full,"148 headerbuffersize is declared but not given a value, this could be set to a very big value that would crash system.At 103 the buf size is set to input from 103 that is not checked before.At 475 there is a check that could always return false",5,3,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Strongly agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.1,0.0
R_5kHcDGxYL3IYyNu,271,Group5,Yes as a Research Assistant at University,As part of University projects,Several years of professional experience outside of university,5-46,0.0,full,Thi seems correct and shouldn't work well.,1,2,56,0.0,slice,math this doesn't really work,2,2,5-67890,0.0,slice,this seems the right thing to do ,3,2,564,0.0,full,this is correct and should work,4,2,Neither-Agree-nor-Disagree,Strongly disagree,Disagree,Disagree,Strongly agree,0.0,0.0
R_10C0Fc0WmZPDXoz,2360,Group3,Not really,No experience,As part of University projects,"The code within the while(true) statement in the string function normalize (dont have a proper editor, download takes too long)",0.0,slice,"The function does not correctly prevent path traversal methods, you could insert a path like ../../../../someimportantdocument/",2,3,86-92,0.0,slice,"The digest function can return an exception and instead of a hashed password, will return a plaintext string which could reveal an users password",2,3,345-354,0.0,full,"I dont see the input being properly checked and sanitized, this could result to the attributes being used to insert malicious code",4,2,413-448,0.0,full,"It's possible for the readsocket function to indefinitely keep reading data which will cause a DOS. Similar with the expand function, but not certain about that.",4,1,Disagree,Neither-Agree-nor-Disagree,Agree,Strongly agree,Neither-Agree-nor-Disagree,0.0,0.0
R_4ZTag6Jezolkg7v,2483,Group6,Only as a Teaching Assistant,As part of University projects,As part of University projects,75,0.0,slice,"The ""path"" parameter is being used to construct a SQL query without proper input validation or sanitization. This could allow an attacker to inject malicious SQL statements into the query, potentially leading to unauthorized access of database",4,2,142; 274; 290,0.2,full,"Since the code does not appear to have proper input validation or output encoding when displaying the user credentials. If an attacker can inject a script in the password fields, the script could be executed when the user credentials are displayed.",3,4,347,0.0,full,"The most likely type of attack is XSS. If these attributes(e.g., ""action"", ""method"", ""target"") are not properly sanitized, an attacker may be able to inject malicious code into the generated HTML, leading to a cross-site scripting attack.",3,4,68,0.0,slice,"The code is responsible for parsing HTTP request headers and seems to implement proper input validation and sanitization techniques, but any downstream processing of the request data could introduce vulnerabilities.",3,2,Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Disagree,0.0,0.1
R_3s6YMpNoh34GuhE,1901,Group4,Yes as a Research Assistant at University,No experience,As part of University projects,76;112;157;180;212,0.0,full,"The HTTP request can contain more data than the internal buffer could handle, causing the server to crash. The aforementioned lines allow more data to be read, thereby creating a security loophole for attackers.",4,1,151,0.2,full,"Line 151 has Information Disclosure, given the null exception that is thrown",2,2,88,0.0,slice,"The server does not check the request for validity, hence exposing a xss vulnerability",1,4,76;112;157;180;212,0.0,slice,"all of the aforementioned lines allow for more bytes to be sent. The server will process the http request object, and as soon as the internal buffer is full, it may crash and cause a DoS",3,3,Strongly disagree,Neither-Agree-nor-Disagree,Agree,Strongly agree,Neither-Agree-nor-Disagree,0.0,0.1
R_3FOL6BSvUcFSIrW,1170,Group6,Yes but in another programming language at a Company,No experience,Find vulnerabilities outside university,114,0.07692307692307693,slice,It is possible to bypass the normalize function and have ../ in the path,2,3,180,0.0,full,The adduser is the vulnerable function,4,1,342,0.0,full,The writeTagContent function is vulnerable to xss,4,1,68,0.0,slice,The parseHeader function is vulnerable,4,1,Disagree,Disagree,Disagree,Agree,Disagree,0.038461538461538464,0.0
R_26aovXcAszRH26f,2668,Group3,Yes but in another programming language at a Company,Developed project(s) using Java outside University,Find vulnerabilities outside university,"119,121",0.07692307692307693,slice,"the function would not remove ""./"" cases in the path and thus ""./../foo/../"" would pass through.
",3,3,89,0.0,slice,"unhandled try blocks and would crash for any error , dos",3,3,434;445,0.0,full,path traversal possible because paths are not checked for context location.,3,4,438,0.0,full,dos possible due to memory being allocated to header length without checking the length.,2,5,Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.038461538461538464,0.0
R_1CvVU07N39EVqGy,2778,Group3,Yes but in another programming language at a Company,As part of University projects,As part of University projects,115; 117,0.0,slice,"Only catches ../ at the beginning of the string, but not if it is further back",3,3,89;90,0.2,slice,"There's an uncought exception, which could lead to an error being thrown.",2,4,467;468,0.0,full,"There is no check on which action is performed, so in theory the user can perform any action",5,2,394; 773,0.0,full,"The buffer could be overflowed, causing the program to crash",4,3,Disagree,Agree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.1,0.0
R_3m8AcYvLa3hl3Os,3165,Group4,Yes in Java at a Company,Developed several projects using Java,No experience,205;208;364;365;366;367;368;480; 850;854;859;860;910;911;915;928;930;,0.3076923076923077,full,these line try  to traverse file directory based on input sent to method and since the methods are public they are directly accessible from outside.,2,3,159;163;184;293;323;335,0.0,full,159 and 163 are logging sensitive information in. 184 the roles to be added are created as string of coma separated roles. 293 throws senstive information. 323 throws senstive information message. ,3,2,68;75,0.25,slice,"68 and 75 only validate the presence of some text before proceeding , while the value could have additional text that could containe code and could be possibly executed after validation.",3,2,55;76;77;109;119;137;228;229,0.0,slice,these lines parse headers and the user of method could pass as many headers as required and fill up the buffer string variable which might cause denial of service.,4,1,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.125,0.15384615384615385
R_3ad8iHXwqa7yHC1,3222,Group5,Not really,Developed project(s) using Java outside University,As part of University projects,854,0.07692307692307693,full,"For 854: The path is not checked for the string ""/.."", only ""/../"", so it is possible to escape out of the context.",4,3,82;87,0.2,slice,"82, 87: Try without catch. Results in leaking the credentials string upon an exception.",3,2,69,0.0,slice,"69: The given action is directly evaluated, which can result in an XSS attack if not sanitised.",2,5,420,0.0,full,"420: If an exception occurs while getting from the pool, the exception will be ignored and the system will block, causing a denial of service attack.",4,2,Agree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Strongly disagree,0.1,0.038461538461538464
R_2Swuf4973133TEJ,2929,Group3,Not really,No experience,No experience,75;91;93;120,0.07692307692307693,slice,"These are lines where there is either a request, or some sort of concatenation of a string. ",4,2,59;62;66,0.4,slice,There are lines with get requests where the input is not checked for validity ,4,2,441;442;445;465;466;467;468;479;480;481;482,0.25,full,These are lines with get request/reponse where the input isn't checked for validity,5,1,397;398;399;475;653;654;655,0.0,full,These are lines where user-controlled values define the size of allocated memory/arrays/buffers or where users influence loop conditions. ,5,1,Disagree,Disagree,Strongly agree,Agree,Disagree,0.23846153846153847,0.125
R_1Kx8flofL7vgaLz,2798,Group2,Not really,As part of University projects,As part of University projects,;,0.0,slice,The path is normalized and should be safe,3,4,64;78,0.0,full,64 and 78 store sensitive information which can be read from the code.,3,3,70;76,0.25,slice,The retrieved action is processed without checking if the action is safe.,3,4,805,0.0,full,"The underlying buffer listens on the socket for http requests to parse.All incoming messages are stored, filling the buffer. Malicious http requests can take up all the buffer space preventing other requests from being handled.",3,2,Neither-Agree-nor-Disagree,Agree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.125,0.0
R_xaVdsmgzk12EEeZ,2807,Group3,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,75:95,0.07692307692307693,slice,"The method does not actually validate the input from the ""user"", e.g. ""path"" variable is not validated.",3,1,62;66,0.2,slice,The username of the principal is displayed in the log. The other is that in line 62 it uses principal.getPassword() and afterward it decode it...,3,2,497,0.0,full,It expose the nested path of that web app ,3,1,415;,0.0,full,I mean the whole method up to 446 and the problem is that the socket is never closed,3,2,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.13846153846153847,0.0
R_3iJuvDXtd1nIgxs,3303,Group5,Not really,No experience,No experience,463; 516,0.0,full,463 is a line where the code checks if the file begins with a certain path and ends with .jar. The attacker could try to validate the input of the file by whitelisting.,5,1,62,0.2,slice,it is not checked whether the password matches the username,3,3,89,0.0,slice,request is not validated,3,3,810,0.0,full,from the user input the length is used for the variable buf,5,1,Strongly disagree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.1,0.0
R_tRKLArCTuM8yHTj,3389,Group2,Only as a Teaching Assistant,As part of University projects,No experience,76;91;93;95,0.15384615384615385,slice,The input is used in the code to construct a path. The input does not seem to be sanitised properly. ,4,1,319;321;235;195;163,0.0,full,The input is not sanitised while it is used to construct a path or a query to a database.,4,1,88;74;75,0.5,slice,The input is not checked for validity. There is a missing else statement. ,5,1,240;262;283;306;337;463;498;534;576,0.3333333333333333,full,User-controlled values influence loop conditions,5,1,Neither-Agree-nor-Disagree,Strongly disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.3269230769230769,0.16666666666666666
R_2feBGxnqgqIwwC7,3314,Group5,Only as a Teaching Assistant,Developed several projects using Java,No experience,479,0.0,full,"Line 479 concatenate two strings to get the full path, which can be dangerous because the concatenated string may contain special characters which redirect the path to a different directory. So the full path might be manipulated.",5,3,86;93,0.0,slice,"In line 86, if true, bytes will simply be assigned with raw bytes from user input. This value can contain special characters which might be complied as code instead of string. It is updated in line 93 without validation.",4,3,88;89,0.0,slice,"Line 88 does not check for illegal action values. As long as there is a processor and the request type is valid, it will process the action and later be returned without any security check.",4,3,227,0.0,full,"without manually set a maximum iteration for parsing the request, it is possible that the loop stuck forever given some special input which will never or take a very long time to meet the terminating condition.",5,2,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.0,0.0
R_264P0zHozptDX72,3518,Group1,Not really,As part of University projects,No experience,479,0.0,full,The full path is the hostname plus a sanitized path. The hostname isn't checked for ../.,4,2,86;87,0.2,slice,probably shouldn't return plain credentials string,5,1,407;429;437;513,0.0,full,the evaluate function is bad,4,1,51,0.3333333333333333,slice,no limit to the number of headers that will be parsed. Could result in too many resources being used,5,1,Disagree,Disagree,Agree,Neither-Agree-nor-Disagree,Disagree,0.26666666666666666,0.0
R_2dLr1JpvotIPkms,3713,Group1,Yes but in another programming language at a Company,As part of University projects,No experience,206,0.0,full,"The path that can be input isn't actually normalized just because it is prefixed with '/'. If you know a subfolder s you can access parent folders via /s/../.., which is normally prevented by the normalize() method, but not in the method getContext()",2,4,-,0.0,slice,"To my understanding the input is never directly queried into a database, which implies that vulnerabilities like SQL injections do not exist in the given code snippet.",4,2,447,0.0,full,"I cannot see what getRequestContext().getQueryString()  in line 445 returns, but if that method does not sanitize you would eventually be able to run e.g. an inserted script in line 451 through the method processAction()",3,3,-,0.0,slice,"Whenever more storage would be needed to parse the header, the private method just returns a status that causes the calling public method to stop its loop to read the header further. No ressources are allocated that would cause an overflow.",4,2,Agree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Disagree,0.0,0.0
R_22tOywUEy1MDak3,3153,Group4,Not really,No experience,No experience,509; 517,0.0,full,The getResourceAsStream() function takes an input and returns the resource of a given path. The attacker can give the idea of a safe path and use this to get the resources of a file that they don't have access to.,2,1,183; 185; 296,0.0,full,"The size of the array called ""list"" depends on the number of commas or the number of roles the user has so it may decrease server's performance or even kill it. Moreover, if there is a problem in line 296, line 298 will not be executed. ",4,1,73;  76,0.5,slice,Line 76 processes the action after retrieving the URI. There aren't any checks on the URI so the attacker could simply replace it with code and the code will be processed.,2,1,51; 55; 109,0.3333333333333333,slice,"Lines 51 and 109 include while loops that only depend on user input. In line 55, the buf array which is used all over in the code later on is also defined by the user and has no conditions.",4,1,Neither-Agree-nor-Disagree,Disagree,Strongly agree,Strongly agree,Agree,0.41666666666666663,0.0
R_NXaAZaoGFQAclY5,3181,Group4,Not really,As part of University projects,As part of University projects,483;928;930,0.0,full,"the function getJNDIUri creates a path based on the hostname and path, no validation is done on the resulting string which is then used in getResource, meaning that an attacker could manipulate what is returned due to the lack of input validation",2,4,144;195;237;250,0.2,full,"No input validation is done on the credentials entered by the user, so malicious input could be given by an attacker which will be stored and returned by the lines specified.",3,3,73;76,0.5,slice,"The requested URI is taken without any processing/validation, then processed as action. This allows an attacker to request a URI with malicious elements which iwll be interpreted as actions that the code execudes without validation",1,4,177,0.0,slice,this loop reads until the end of the line is reached. If a malicious attacker has an input that doesn't terminate this loop the loop will run infinitely and cause the service to become unavailable to parse new requests,2,3,Neither-Agree-nor-Disagree,Agree,Agree,Strongly agree,Disagree,0.25,0.1
R_1OvnM8Bpk1kam5r,3957,Group3,Not really,No experience,As part of University projects,48;75,0.0,slice,"1. line 48 ""import ./ServerInfo;"" may lead to information disclosure, it's unsafe to save the information in a file and load it directly
2. function ""getRequestDispatche"" may cause a denial of service, the input does not set any limitations",4,4,62;82,0.2,slice," the digest functuin use a simple encoding method, may lead to information disclosure ",2,4,447,0.0,full,"if somebody try this request again and again, it may lead denial of service, but I am not sure we need to limit the time of requests here",4,3,374,0.0,full,"I am not sure about this answer, it seems that we can check the length of constant in case of not lead to some memory problems",2,2,Neither-Agree-nor-Disagree,Agree,Strongly agree,Strongly agree,Agree,0.1,0.0
R_1hYeAlqhuGI1fOO,3849,Group3,Yes but in another programming language at a Company,As part of University projects,No experience,87;95;108,0.15384615384615385,slice,"87 uses url that could contain malicious content
95 getRequest method and if it's not validated or sanitized it can lead to injection vulnerabilities
108 normalizes paths so if it's done inappropriately it can lead to a path traversal",3,2,62;90,0.4,slice,62; possible weak encryption of the password | 90; may return null references,3,2,466,0.0,full,It doesn't check the validity the page it requests,3,2,418,0.0,full,multiple thread block can lead to DoS,3,2,Disagree,Agree,Agree,Strongly agree,Strongly agree,0.27692307692307694,0.0
R_1cTcawAFlCftIi6,4346,Group2,Yes but in another programming language at a Company,As part of University projects,As part of University projects,111;114;116,0.07692307692307693,slice,"If the user inputs a path like ""/file/../file"" where the ""/../ "" is in the middle of the path, the program will lead to a Path Traversal.",2,3,147;210;236;299,0.2,full,Leading to a Information Disclosure because of too many error messages or the user information,4,2,67;69;74;76,0.5,slice,Get input from servlet which will lead to a XSS,4,2,103;398;420,0.0,full,May kill the server by filling all memory,2,4,Agree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Agree,0.28846153846153844,0.1
R_3oQFWPaE18bzTOW,3612,Group4,Not really,No experience,No experience,339;463,0.0,full,"339: This function does not contain a recognition of /
463: This function it's path recognition is improper, because whenever it starts with ""libPath"" and ends with "".jar"", it assumes that the path is safe to use. But that's not always the case
",3,4,144,0.2,full,144: They do not check if the username's input,2,4,73,0.25,slice,"73: in this line you see a getRequest followed by response, where the validity of the input will not be checked",2,4,114;55,0.0,slice,"114: Need more data, but we can decided to not give the data, which makes it stop working   55: contains buffer size which we can alter ",3,3,Disagree,Agree,Agree,Strongly agree,Strongly agree,0.125,0.1
R_3IWtk06QJIfb87q,3523,Group3,Not really,As part of University projects,No experience,"75;78;79;114,118",0.23076923076923078,slice,input request from user and path position is appended with new application dispatcher as null,3,1,58;59;61;62;85;86;87,0.8,slice,The login credentiala are validated but does not authenticate login. The byte size is null.,4,1,391,0.0,full,looks like unwanted exception raised. ,5,1,475,0.0,full,heavy resources not released and single user allocation,4,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.5153846153846154,0.0
R_21sxZN0xSIk4qTj,4086,Group1,Yes as a Research Assistant at University,As part of University projects,As part of University projects,840; 928; 930,0.0,full,"(928, 930)Hostname is used for creating the path directly.
(840) Although I haven't found any error in the ""normalize"" method, if anything is missing or the if/else cases are badly programmed this could be a vulnerability in the sanitizing method. 

",4,2,93,0.0,slice,Can throw NullReference exception,2,4,445; 447; 466; 480 ,0.0,full,"In all of these cases, the request or query is not validated before using its data, this means there could be malicious code for XSS behind it. ",2,4,50;76,0.3333333333333333,slice,"the checking for the size of the header is done after parsing the headers, so if the user were to set a very long header(s). The program would invest a big amount of time on processing that header and thus become stuck. ",3,3,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Agree,0.16666666666666666,0.0
R_2CNgG1jDwk53nvK,3318,Group6,Not really,As part of University projects,No experience,77;96;112,0.0,slice,The reason for these lines being vulnerable is that extra . and / characters can be put and the attackers can use that to bypass validation methods.,3,2,153;163;196;237;292,0.0,full,Improper input validation,4,2,332;360;361;429;437;468;482,0.0,full,Lacking input sanitation and displaying cross site output without encryption,5,1,83;94;118,0.0,slice,These could lead to stack overflow.,3,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.0,0.0
R_3k7ErOo51YmiLjf,3624,Group6,Yes but in another programming language at a Company,Developed several projects using Java,No experience,116;,0.0,slice,It only checks for '/../' and not other vulnerable paths.,3,2,187;294;,0.0,full,"187 looks like a DoS attack, as there is no check on the roles that can be added or on it's size. It may also be a good idea to clear the bytes so that we do not do an md.update() on errored out bytes. ",4,2,447;451;468;,0.25,full,The query string is considered as part of the URL and then it is processed later on.,3,2,136;166;191;231;,0.0,slice,"There is no cheeck on the length of the header name length, spaces, line length, or the number of lines. The while loop will not end as there is no upper constraint provided to these loops.",3,2,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Agree,0.0,0.125
R_5Bjq6Q5Eda092bn,3703,Group5,Not really,No experience,No experience,451,0.0,full,This line of code may  cause the information Disclosure.,3,2,62,0.2,slice,"If the password was null, it may throw null reference exception.",3,2,68,0.0,slice,"the use of StringUtils.hasText() assumes that the input is non-null, non-empty, and contains non-whitespace characters, which may not always be true and could lead to unexpected behavior.",3,2,456,0.0,full,"The StringManager object is typically used for localizing error messages and other strings in the application, but it's possible that the message could be crafted to include user-provided input or other sensitive data.",3,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.1,0.0
R_3kpREA7clqzBhW4,4047,Group6,Yes but in another programming language at a Company,As part of University projects,No experience,111; 114;,0.07692307692307693,slice,"114: The attacker may use these two lines to change the file's location, and it may mislead the user to the wrong website/file. And then it may cause information disclosure.",3,3,164; 236; 301;,0.0,full,"The attacker can find the error messages through these above lines to help them get some informations, and it can cause information disclosure.",3,3,360; 365; 446; 447,0.0,full,The attacker can use these inject scripts to have the access to the targeted application.,3,3,55; 109; 127; 224,0.0,slice,"55: The attacker can change the size of buffer to ""kill"" the server by filling it. 109: Attacker can control the loop. The line 127 and 224 should break in the end block.",3,3,Agree,Neither-Agree-nor-Disagree,Strongly disagree,Strongly disagree,Agree,0.038461538461538464,0.0
R_1OH4FW3H64iAgIu,4247,Group3,Yes in Java at a Company,Developed several projects using Java,As part of University projects,119;120,0.15384615384615385,slice,"There is no check that path actually starts with ""/' as stated in the assumption and in the normalize() method the unhandled exception with too many details is thrown when you load a path like this: ""../../../."". Also null pointer for path=null",4,3,86;87;88;89;90;91,0.4,slice,Try without catch and exceptions on credentials=null,4,3,365,0.0,full,Can exploit xss via hidden input tag ,5,3,98,0.0,full,"headerBufferSize size never validated in the alternate constructor, can be too large",2,3,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.27692307692307694,0.0
R_1hBi5XNfwi1cv6p,4010,Group2,Not really,No experience,As part of University projects,89;92;115;117,0.0,slice,Missing corresponding conditional statement,5,2,282;299;289;291,0.0,full,"losing ""finally"" statement",5,2,75;88,0.25,slice,No validity check for request statement,5,1,418;420,0.0,full,"losing proper statement for ""try""",5,1,Strongly disagree,Disagree,Disagree,Agree,Disagree,0.125,0.0
R_2qrUe6XhxGreo3M,4253,Group4,Not really,As part of University projects,No experience,204; 396; 514; 753,0.0,full,Normal execution is executed. It should include a finally in case the code throws an exception before it is done.,4,1,;,0.0,full,Couldn't find any vulnerable lines,4,1,87; 74,0.25,slice,gets input from http entity. and does not check for validity,2,4,83;118;164;187;220;,0.0,slice,program can be killed if all memory is used.,4,1,Agree,Disagree,Strongly agree,Disagree,Disagree,0.125,0.0
R_1ifn94RNqMnEO3L,4776,Group4,Yes but in another programming language at a Company,Developed project(s) using Java outside University,No experience,"364;394;449;452;537,480;900",0.0,full,These lines are all related to the fact that the developer is exposing a path to the potential attacker by throwing the exception that includes the path of the resource. the developer did not check for the existence of the resource on that path.,4,4,"151,153,195",0.2,full,In all the cases password was not checked for anything like maybe there is a script in password which was sent from Front-end. Attacker can add script to password. It was not even checked for null which is dangerous to save password of null,3,4,89,0.0,slice,This line is the main problem because there was an http request but does not check the input for validity. It only checks if it is null. This is doing actual process action which echos to user,2,5,"51,73,109,151",0.3333333333333333,slice,these lines we are looping on headers which was sent from end user (or attacker) which can be alot and based on limited resources could crash server and result in Denial of Service,2,5,Agree,Agree,Agree,Agree,Agree,0.16666666666666666,0.1
R_2Ui9T81qAVvDLZx,3574,Group3,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,79;87; 110;113;,0.15384615384615385,slice,"If path is null, there can be null reference exception in line 79 and 87. 
And there can be an infinite while loop at line 113.
",2,4,87;66;,0.2,slice,Information Disclosure at line 66,3,4,386; 467; 481; 492; ,0.0,full,"at lines 386, 467, 481 http methods are used. and at 492 public identifier is used",4,3,274; 399;,0.0,full,"In line 399, array is used.",4,3,Agree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Strongly agree,0.17692307692307693,0.0
R_UGgNHuEYVqUoxtT,3452,Group1,Yes but in another programming language at a Company,As part of University projects,Find vulnerabilities for several projects,200;518;687;741;,0.0,full,"I controlled ""try catch""s and if-else conditions. Also I checked returned value.",3,2,62;65,0.2,slice,validated is not defined before using it,4,1,382,0.0,full,string and boolean cannot be compared,4,1,224,0.0,slice,no need break because it continue with while loop.,3,2,Strongly disagree,Disagree,Agree,Agree,Disagree,0.1,0.0
R_3KxqXVic7WpJT1D,3795,Group5,Not really,No experience,As part of University projects,300; 348; 349,0.0,full,"Get MIME type of the specified file, but the MIME type cannot be determined. It could be threatened. For the 348 and 349, creating a new or absolute path.


",3,3,62; 66;,0.2,slice,When the username is null or special letter.,3,3,74,0.25,slice,In the getRequestUri is collowed by response,3,3,148; 153; 159,0.0,full,Maximum allowed size of the HTTP request could be overload. If the skipBlankLinesSize is larger than 1024.,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.225,0.0
R_2y78wOxzuEMlJGc,4201,Group3,Yes as a Research Assistant at University,Developed project(s) using Java outside University,No experience,76;117,0.07692307692307693,slice,"The code only checks if the "".."" is at the beginning of the input string. There could be a case where the malicious user inserts ""/foo/bar/../../../../"" which would lead to going outside the context.",1,5,59,0.2,slice,"As no filtering is done on the username string, there is a possibility for an injection",2,5,184;199,0.0,full,"the action and servletAction are set without checking for malicious code, leading to a cross-site-scripting vulnerability when displaying the form",4,4,360,0.0,full,"Not including an end of line character, or escaping it would cause the program to go into an infinite loop, therefore causing a DoS",4,4,Strongly agree,Agree,Strongly agree,Strongly agree,Strongly agree,0.13846153846153847,0.0
R_vqVXA6FIua4HmZX,4404,Group5,Yes but in another programming language at a Company,As part of University projects,No experience,463;849;910;927,0.0,full,The path validity check on these lines are too broad.,5,1,91;95;93,0.0,slice,"Two ""try"" blocks in the program do not come with ""catch"" or ""finally"". There is no validity check before turning the credential into bytes.",4,2,70,0.0,slice,"It does not perform a validity check for ""action"", which is probably an arbitrary input, before doing an HTTP task.",4,2,103;426;433,0.0,full,The constructor does not limit the buffer size. There is not restriction on reading the buffer when the buffer is too large.,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.0
R_s5oomC4ENa3owvf,3957,Group4,Yes but in another programming language at a Company,As part of University projects,No experience,200;211;349;517;466;468;483;549,0.0,full,"These lines of code include insufficient input handling, accessing computer files with path strings which are not properly constrained, streaming content from files, getting paths of internal files ",4,2,144;235;195;,0.2,full,No input validation of credential before accessing database for lookup,2,3,73;66,0.25,slice,In these lines the code gets inputs from http-entities and it is not input-validated,4,2,76;112;157;180;212,0.0,slice,"In these lines of code you keep reading more bytes as needed, which may be infinite as there's no parsing ",5,1,Disagree,Agree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.125,0.1
R_3MSfnZ4ntLWRAkJ,3938,Group5,Yes but in another programming language at a Company,As part of University projects,No experience,207;273;283;,0.0,full,"207: Does not check if the request is from an authorized source.
273,283: Returning the major and minor versions of the Java Servlet API is not advised.
",4,2,62,0.2,slice,"Case sensitivity is ignored, this will lead to false authorisation.",1,5,72,0.0,slice,it is missing a condition to check if it is a servletRelativeAction,3,4,256,0.0,full,parsingRequestLinePhase is not continuous. Goes from 0-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6,5,2,Disagree,Strongly disagree,Agree,Agree,Disagree,0.1,0.0
R_2atpanWlsIEAwEv,4443,Group4,Not really,As part of University projects,As part of University projects,479,0.0,full,"479: The normalized user-provided path is added to the root path. Normalization removes ""/../"" but not ""../"", so we can still break out of the context by using the ""/"" of the previous path to complete the ""/../""",4,1,151;153,0.2,full,Can crash the code if the credentials are null. The digest function throws a nullptr exception but it is never handled.,5,1,68,0.0,slice,The user-provided is not recognized and in the else the Uri is processed and the action is used there.,4,1,51,0.3333333333333333,slice,"For as long as there are headers to process, the code will loop and try to do so. There is no threshold or limit on their count, so it is possible for a malicious user to slow things down by providing large numbers of headers.",4,1,Agree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Disagree,0.16666666666666666,0.1
R_3MDzkSHSKJd2ZCx,4035,Group6,Yes but in another programming language at a Company,As part of University projects,No experience,88; 113,0.07692307692307693,slice,"In line 88 (pos &gt;= 0), the pos could be 0 so the code could break. In while loop at line 113 String normalize(String path) there is not an if statement that covers the case where index&gt;0. 
",4,1,277; 287,0.2,full,287: It does not specify if the bytes are 0 ,3,2,480;465;445,0.0,full,"These lines get an input from an HTTP request object, query strings ",3,2,73;151;235,0.0,slice,The loop condition is influenced by the user. 235: There is no limit to the buffer space per user.  ,2,3,Strongly disagree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Agree,0.038461538461538464,0.1
R_vJn9S8pKtWxEzWp,4653,Group2,Not really,As part of University projects,No experience,125,0.0,slice,There is an open bracket at line 125. There is authentification missing in the entire code.,3,2,287;290;319,0.4,full,for 287 and 290 there is no NULL exceptions and for 319 it is in public function and the path is given by the user.,3,2,85,0.0,slice,There is no exception if the string variable action is NULL.,3,2,;,0.0,full,I don't see what is vulnerable in the DoS_X.java file,4,1,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.2
R_2VOy34WzkAVb8EH,3746,Group1,Yes but in another programming language at a Company,No experience,No experience,197;339,0.0,full,getRealPath can be used to get the path to the root and from there we can use getContext with anything we like accessing any context,4,2,58;59,0.2,slice,"We don't validate username, so it can be arbitrary SQL code, run by principals.get ",3,4,228;243;258;273;288;464,0.0,full,"user is allowed to inject js code, which is then executed",3,4,173;,0.0,slice,"There is no limit on header size, it is easy to overload the server by sending many requests with big headers.",3,4,Agree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.1,0.0
R_2czsrX2vGnwNBTw,4394,Group6,Not really,As part of University projects,No experience,75,0.0,slice,"Gets an input from user; 
and the path must begin with a ""/"", so even if the input has a sanitization function, 
int pos = path.indexOf('?'); contains error.",3,1,156,0.0,full,"what if return principal's username is null, then it's wrong ",4,1,324;360,0.0,full,The name of the request param for non-browser supported from an HTTP methods; Does not check the input for validity.,2,2,55;,0.0,slice,socketReadBufferSize may be limited and cause throwing error; ,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.0,0.0
R_1l0LUMxjnkFEQCn,4194,Group5,Yes in Java at a Company,Developed project(s) using Java outside University,As part of University projects,348;368;458;505;543;860,0.15384615384615385,full,"The normalize method seems obsolete at line 860 thus, every line that call the method is also obsolete as the normalization will not be done correctly resulting in a path vulnerability. Line 348 can also be vulnerable as we are not checking the path.",2,3,62;94,0.2,slice,"Line 62 is vulnerable as it calls the method digest that is also vulnerable. Indeed, line 94 is vulnerable as we do not handle the exception case in the conversion. Thus, validated will not have a value false and we can enter the next if statement..",2,4,69;76;89,0.25,slice,"Lines 69 and 76 are vulnerable as we call the processAction method without checking the input.The attacker can inject vulnerbable code. Line 89 is vulnerable as it's where we are executing the code of the attaker, we need to check the action as well.",2,4,240;262;306;337;580;602,0.0,full,All these lines contains while loop that can run for a long amount of time or even indefinitely if we give it a specific kind of input.,4,3,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.225,0.07692307692307693
R_1Kvatmhe3zhnSth,4499,Group3,Only as a Teaching Assistant,As part of University projects,No experience,76;114;115;123;91;93;95,0.3076923076923077,slice,"The normalize function on line 76, calls the indexOf() function on line 114, which searches for pattern ""/../"" while a pattern like ""../"" is ignored. In that case, line 115 breaks the loop and returns the out-of-context path on line 123.",3,4,59;87;93;94;61;65,0.6,slice,The credentials of the user specify the size of the byte array on line 87. This may cause the system to run out memory and return null. Null causes line 61 to fail which causes line 65 to evaluate an undefined variable and crash.,2,4,426;428;429;430;468,0.0,full,A user can configure an action value which is directly evaluated on line 429 and processed on line 468 from the function on line 430.,4,2,462;463;583;585;661,0.6666666666666666,full,"While parsing the headers on line 454, the parseHeader function called on line 462 can read new bytes and return early without calling recycle() on line 661.",5,2,Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,0.45384615384615384,0.3333333333333333
R_2t3cbjlrqR5PDgY,4740,Group3,Not really,No experience,No experience,96; 119,0.07692307692307693,slice,lack of constraint of the input,5,1,62; 68,0.2,slice,to many detailed exposed and lack of process that verifies some situations,5,1,434; 443,0.0,full,information disclosure and there no check for the validity of the input,5,1,692,0.0,full,there is no limitation for the pos value,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.13846153846153847,0.0
R_DItauU6CBCrfciZ,4340,Group4,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,"155,200,769,777",0.0,full,"155 : context is initialised to null ,getResource is truing to access the relative path via a null reference
200:  if ((uri == null) || (!uri.startsWith(""/"")))  ---&gt; here startwith string refernce could be manipulated
769 :
777:context is initialise
",4,2,"233,144",0.2,full,"144 : getusername retrives the username and credentuals  without proper sanitazation.233:retriveing password method is protected,must be private ",4,2,74,0.25,slice,response is sent without validation inside request.,4,2,177;235,0.0,slice,177:while loop result in infinite loop and fill the buffer 235: trying to setBytes from buffer values can lead to DOs,4,2,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.125,0.1
R_21bSXxGzUxO7xsY,4489,Group4,Yes in Java at a Company,Developed several projects using Java,As part of University projects,211;539;926;483,0.0,full,"If the input is like ""/..//"" then it is vulnerable because we may get a path like""//"" .",5,1,237,0.0,full,the method of getting password is not protected ,5,1,74,0.25,slice,An attacker may maliciously add some suffix to the url,5,1,151,0.0,slice,The termination of loop is user-controlled,5,1,Disagree,Neither-Agree-nor-Disagree,Disagree,Strongly agree,Strongly disagree,0.125,0.0
R_2Bye7BGXEea1w4F,4864,Group3,Not really,Developed several projects using Java,As part of University projects,81,0.07692307692307693,slice,this line has not checked the input of the path string before applying it in a query command.,4,2,62,0.2,slice,"haven't used try catch, the information of the system might be exposed due to some malicious input.",4,3,443,0.0,full,"There's no senitation to the response, which may be vulnerable",5,1,425,0.0,full,"the try catch process may stop when execute the first line and will not go to the next. And the Exception may not be throwed, which may cause the DoS",5,1,Disagree,Disagree,Agree,Agree,Disagree,0.13846153846153847,0.0
R_1mR9mw0JhcUID7q,4607,Group4,Not really,As part of University projects,No experience,368;458;505;543,0.07692307692307693,full," the method normalize(String path) which appears to perform path normalization, making it a potential target for a path traversal attack if it does not correctly handle user input.",4,1,195,0.0,full,"line 195 stores passwords in clear text and if the password is Null, it may throw null reference exception",4,1,69,0.0,slice,"if the evaluation is bad, then it may cause problems.",4,1,55,0.0,slice,"This line check the buffer size before parsing the headers, and throw an exception if the buffer size is too large. An attacker could send a request with an excessively large header to cause the buffer size check to fail and trigger an exception.",4,1,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.038461538461538464
R_2dsCthTiQ8gNjOW,5020,Group6,Yes but in another programming language at a Company,As part of University projects,No experience,91;93;107;111,0.0,slice,"91;93 Both of them seem to append in a string related to a path
107; The normalize function takes as input the path and therefore it is easy to work with it
111;  The path is manipulated and therefore could lead to Path Traversal",2,4,148; 151; 153; 237; 278,0.2,full,148; That if throws null exception if credentials equal to null           151; 153; Both lines use getPassword function on the principal 237; the pasword is returned if principal info is different than null 278; the credentials are returned without a,3,3,447;,0.0,full,447; the variable requestUri is made of a concatanation and executes a query,2,4,235; 236;,0.0,slice,235; I believe this line is malicious because is contains some parameters that can be manipulated so that the next function on line 236; destroys certain elements,4,2,Disagree,Agree,Strongly agree,Agree,Neither-Agree-nor-Disagree,0.0,0.1
R_3NKwGiLHYVMr4ny,5277,Group1,Yes in Java at a Company,Several years of professional experience with Java,As part of University projects,200;205;300;366;384;402;406;463;483;509;539;734;737;850;854;859;910;928;920;,0.23076923076923078,full,Most of the checks are either the first character or last characters but do not have any check if it for example begins with a white space. There is no check for multiple break point characters are included in the input.,2,4,62;87;90,0.6,slice,The only check is byte comparison. This can ealsiy be bruteforced.,2,4,184;429;434;447;468;,0.0,full,There is no check for the action if it is in the list of acceptable actions. The user could add a script with an alert.,3,3,51;180;187;196;201;212;220,0.3333333333333333,slice,No check on number of headers could be running for a long time if user configures many headers. No upper limit on the content of the header. No condition to check the char it could be an undecodable character.,4,3,Agree,Agree,Agree,Agree,Agree,0.4666666666666667,0.11538461538461539
R_3maQy7at9ZfUwFa,4967,Group1,Yes but in another programming language at a Company,As part of University projects,Find vulnerabilities outside university,348;463;926;,0.0,full,"Line 348: Could be used to potentially get the path of other files.
Line 463: Could point to another file outside the libPath
Line 926: If the path starts with a "".."" or a ""/../"" it could allow URLs to files in the hostname directory",4,3,90;,0.2,slice,If the credentials are a value that causes an exception for converting to hexadecimal a man in the middle might be able to read the raw value of the passed credentials,4,3,342;,0.0,full,"Line 342; In this function there are a lot of get of attributes that are then set in HTML, if set by a malicious attacker they could put in code that executes on the browser returned to legitimate users. ",4,3,68,0.0,slice,"There are a lot of while loops that an attacker could try and send inputs to that would cause them to run infinitely, thus causing a DDOS attack",4,3,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Strongly agree,Disagree,0.1,0.0
R_1g8yrJ8Wvdxbhzh,4795,Group4,Not really,As part of University projects,No experience,462;471;482,0.0,full,"first, the statement in 462 directly defines the address of the file ,which may cause the file to be unable to be queried, and hackers can easily change the file address. also the 482,  the resource path is easy for hackers to change .",2,3,184;236;250,0.0,full,"there will be many errors when loggin in, 184 use better symbols to segment new users.  236/250 too easy to have bugs  when finding the right username and password",4,2,66;73;86,0.25,slice,"information disclosure, elevation of privileges",4,3,56,0.0,slice,56:may throw null reference exception ,4,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,0.125,0.0
R_3k7KYUeK9efTGTC,4991,Group1,Not really,As part of University projects,No experience,463;432,0.07692307692307693,full,"463: there may be path traversal problems because if user's input contains things like ""../"", then it is possible that user can access some files beyond their permissions
432: Insufficient input validation, may cause XSS problems

",2,3,87;90,0.4,slice,87，90: may throw null reference exception,3,2,447,0.0,full,"The code doesn't check the input for validity, so there may be XSS problems",2,3,83;,0.0,slice,may run out of the whole memory,3,3,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.2,0.038461538461538464
R_1PcouN9SkV9SC9N,5148,Group6,Not really,As part of University projects,No experience,110;111,0.0,slice,"The normalize method could be vulnerable to path traversal attacks. If an attacker can pass in a path that contains ""../"" or ""./"" sequences, the normalize method may not correctly remove them, allowing the attacker to access files or directories",4,2,287;335,0.2,full,"These lines exist the information disclosure problem, if the password is null, which may throw the null reference exception. Also, The code uses an XML parser to process an XML input file, that is the input file is supplied by an untrusted source,",4,1,386;382;409,0.0,full,"The assertHttpMethod method should be improved to validate against a known list of valid HTTP methods rather than simply checking against the HttpMethod enum, which may not include all valid HTTP methods.",4,1,55;56,0.0,slice,"Potential Denial-of-Service vulnerability in parseHeader method, if the input buffer contains a very large amount of data, it is possible that this method could consume excessive resources, thus cause the DoS problem.",4,2,Disagree,Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.0,0.1
R_2yrpYGZggIq1RyQ,5321,Group1,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,155;471;483;571,0.0,full,the attackers can use these codes to find the lib location,4,2,59;62,0.4,slice,"if the attacker input username as"" aa' ; drop table user;"" will be interpreted as SQL code. Then database will process this code.",2,4,433;451,0.25,full,"if attacker use the url like"".jsp?&lt;script&gt;alert(\""XSS\"")&lt;/script&gt;"", the browser will response this as XSS code",3,3,50,0.3333333333333333,slice,"The code does not check the length of header before run it. if attackers input a lot of header value, maybe cause the server be killed.",3,3,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.3666666666666667,0.125
R_22VyuRj7Fet0j5L,4523,Group6,Yes in Java at a Company,Several years of professional experience with Java,Find vulnerabilities outside university,91;93;95;114,0.15384615384615385,slice,"While sanitizing, we only check for paths that contain /../. There is no check for a path that starts with ../, so other resources can still be exploited on the server even after sanitization.",3,5,151;153;157;160;237;277;278;301,0.2,full,"If a username is provided but the password is null, an exception will occur in the digest() method that would return the null credentials string. In authenticate() method, validated check would then return true even though password is not entered.",4,4,370;371;375;376;495;497,0.0,full,setAttribute() is called on pageContext with the value being retrieved from the request. If a hacker enters malicious code it would then be executed on the user's browser.,4,3,49;50;51;87;,0.6666666666666666,slice,"Since we can send any custom header to the server, the do while statement could exhaust the server's resources by parsing all the incoming headers from a single request. This would make the server unavailable.",2,5,Agree,Strongly agree,Agree,Strongly agree,Agree,0.41025641025641024,0.1
R_3mTv8DHFOw4bTbj,4968,Group6,Not really,As part of University projects,No experience,75,0.0,slice,"The normalize function deals with string cleaning and extracting, however, without sanitizing. The path argument in line75 may be added some relative path by the attacker to go somewhere else, which may cause potential risks. ",3,3,"287,301",0.2,full,"password is directly stored, and it may give too many error messages about credentials, including default messages. This may cause information disclosure",3,3,386,0.0,full,the loop is not elegantly controlled,5,1,73,0.0,slice,"If someone sends a huge number of HTTP headers, the program will continue dealing with all those headers and this could never end.",4,2,Disagree,Neither-Agree-nor-Disagree,Strongly agree,Agree,Agree,0.0,0.1
R_w5FUlA5gTxiQ4yl,1795,Group4,Not really,As part of University projects,No experience,204;694;853,0.07692307692307693,full,"in 204 and 694, a try catch block is used without throwing an exception and in 853 a while loop is used with true condition which has the risk of running forever
",3,2,58; 180,0.0,full,"In 58, a digester is being initialised to null and then being checked if it is null in another function. In 180, it is too easy to add a user and this is risky",4,3,65;51,0.0,slice,"in 65, it says that it throws an exception but when implemented, there is no proper code written to throw and catch an exception, On 51, warnings are supressed which is not good coding practice",4,2,155;47;68,0.0,slice,"On 155, a while loop with true condition is used and this has the vulnerability of running infinitely. On 47 and 68, exceptions are thrown but there is no code written to catch them",3,1,Disagree,Disagree,Disagree,Agree,Neither-Agree-nor-Disagree,0.0,0.038461538461538464
R_1oz1UddC7uy5QvH,4999,Group6,Yes as a Research Assistant at University,No experience,No experience,107,0.0,slice,"This function ignores the recognition of  '../'. That is, if the attacker  input the path like 'dir1/../dir2/secretFile"". The secretFIle will be accessed. That is when the path traversal happens.",4,3,107,0.0,full,In this  sanitization  function the path will not handle properly  such as paths with redundant slashes or URLs with query parameters. ,3,3,107,0.0,full,In this  sanitization  function the path will not handle properly  such as paths with redundant slashes or URLs with query parameters. ,3,3,107,0.0,slice,In this  sanitization  function the path will not handle properly  such as paths with redundant slashes or URLs with query parameters. ,3,3,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Strongly agree,0.0,0.0
R_2X7orZsI2e89vzb,4957,Group3,Not really,No experience,No experience,375;434;497,0.0,slice,"375:The previousNestedPath is just got from page context without sanitization.
434: The sanitization is not strong enough to avoid the path traversal.
497: Like line 375, the previousNestedPath is used without sanitization.",4,1,59;62,0.4,slice,59:get username and use it directly. 62: compare input password with the password. ,4,1,429;437,0.0,full,Both lines get display strings and process them.,5,1,337;440,0.0,full,lastValid is controlled by others and it influences the loop.,5,1,Strongly disagree,Strongly disagree,Neither-Agree-nor-Disagree,Strongly disagree,Disagree,0.2,0.0
R_122PenXDtfMkk6e,5119,Group2,Not really,No experience,No experience,120;,0.07692307692307693,slice,"For line 120, it seems that the directory before the /../ will also be removed.",4,1,293;,0.0,full,"it tells that the problem is credential encoding, I think it's too much information",4,1,91;,0.0,slice,the action can be returned without any sanity checking ,4,1,749;,0.0,full,the buffer size can be a very big value,4,1,Strongly disagree,Neither-Agree-nor-Disagree,Agree,Disagree,Disagree,0.038461538461538464,0.0
R_2wdaJmgLYXDRMLg,4736,Group4,Not really,Developed several projects using Java,No experience,205;463;509,0.0,full," in the method getContext(), the param uri  is an absolute URI of a resource on the server. That can be used by hackers.

in the method getResource(), it gets a path from user to construct a path for creating a new file.

getResourceAsStream(),same

",4,3,151;153,0.2,full,"if credentials == null, they will throw null pointer exception",3,3,68;,0.0,slice,compare the action with exsiting StringUtils  and send it to execute in processAction(),3,3,177,0.0,slice,"setting  the eof = false, but only set it to be true when chr== constants.LF",3,4,Agree,Agree,Agree,Agree,Agree,0.0,0.1
R_3KN2x3WU4w0qirN,4030,Group1,Yes in Java at a Company,Developed project(s) using Java outside University,Find vulnerabilities outside university,361; 366; 368,0.07692307692307693,full,"1) Gets input from user
2) No input sanitisation at all
3) The path is used to access a resource which will be later accessed by the user",2,4,62; 92,0.2,slice,"62 -&gt; expose the application to credential stuffing attacks ;92 -&gt; There is no catch block so there can be an unhandled exception. On re-occurrence, this can cause a potential dos attack.",2,4,437,0.0,full,"The servletRelativeAction parameter is retrieved from user input (i.e., it's a request parameter) and is used to build a URL. For instance, if the user submits a malicious input like ""&gt;&lt;script&gt;alert('XSS')&lt;/script&gt;, it can cause a XSS vulnerability. ",2,3,235,0.0,slice,"The buf is not reinitialised or freed, so seems that if there are a lot of headers, the same buffered object might be used which can potentially use all the memory. ",4,2,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.1,0.038461538461538464
R_1LTGES4ZmR15DIa,5013,Group4,Not really,As part of University projects,No experience,348;466;468,0.0,full,It used the constructed path to request file resources.,3,3,144;151;153,0.4,full,It uses the input of the username as the key to construct a query or add a new entry in 'principle'.,2,4,69;89;,0.0,slice,It uses the requested data to render the browser.,2,4,55;73;109;152,0.0,slice,User-controlled values influence loop conditions.,4,2,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Agree,0.0,0.2
R_33vZvfyF4LIQNGV,5813,Group2,Not really,As part of University projects,No experience,110;120,0.07692307692307693,slice,"110: User might not input string including ""\\"" but ""\""
120: // things in "" /../""  might be skipped",3,3,195;250,0.0,full,not check input for validity,3,3,74,0.25,slice,if requestUri might be injected,3,3,661,0.0,full,not close this recycle connection,3,3,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.16346153846153846,0.0
R_12A3e9pgs4AgCwf,5703,Group2,Not really,As part of University projects,No experience,79;87;,0.07692307692307693,slice,Might have the chance to return the exceptions if the normalized path is null.,4,4,151;153;287;,0.4,full,Should check the credentials that they should not be null.,2,3,74;,0.25,slice,Could render the hackers' code on the users' browsers.,2,4,425;463;,0.3333333333333333,full,"If thats a IO exception, there might not have the nRead. Should add timeout for line 463 or the ""while"" might run for a long time. ",4,3,Disagree,Agree,Strongly agree,Strongly agree,Agree,0.16346153846153846,0.3666666666666667
R_2rHFaoDNTphevdr,5838,Group2,Not really,As part of University projects,As part of University projects,118;76,0.07692307692307693,slice,"If the method normalize returns null that may affect the rest of the path. Moreover, there is no check to see if the path begins with / so any query could be executed.",5,1,159;163;,0.0,full,"If isDebugEnabled is true, then the authenticate method will tell an attacker if the credentials for a specific username is correct or not, which would help the attacker find the right credentials.",3,2,66;89;,0.0,slice,There is insufficient validation when getting an action since an attacker can insert malicious scripts into the code. There is also a reflected XXS variant since it echoes back a HttpServletResponse to the browser.,3,2,749;661;,0.0,full,The server can be killed if the buffer's memory is filled completely. If the method parseHeader() throws an exception then the headerData is never recycled and the server can keep parsing the Header and eventually run out of space in the buffer.  ,4,2,Neither-Agree-nor-Disagree,Disagree,Agree,Neither-Agree-nor-Disagree,Strongly disagree,0.038461538461538464,0.0
R_3MQJSbC7Tlp15B9,5498,Group6,Yes in Java at a Company,Developed project(s) using Java outside University,As part of University projects,107;110;114,0.07692307692307693,slice,"107: The aspects the function considered are inadequate. Despite the formatting, it is still possible to access higher-level directories in this way, cascading upwards.
110 and 114 are same because they still contains path information.",2,3,111;113;195;196;237,0.0,full,"The list contains all the users information will be returned when new user is added, which is not reasonable. User's password information can be easily compromised.",2,4,"445,447",0.0,full,"Information submitted by users is not seriously reviewed and processed. Thus, some content that can be identified as code and is malicious may pose a risk.",4,2,51;54;55,0.3333333333333333,slice,"Through the cascade of calls, exceptions may be thrown, causing the service to terminate.",3,2,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.20512820512820512,0.0
R_5yUf0PoPOwoqsGR,5515,Group2,Yes as a Research Assistant at University,Developed several projects using Java,No experience,113;120,0.15384615384615385,slice,"113: Denial of Service, The user has control over the  while loop, it may run forever",3,2,293,0.0,full,Information Disclosure,4,3,87,0.0,slice,"XSS: Gets an input from an HTTP entity such as query string, header or form, or request object",2,3,262; 283; 306; 337,0.0,full,Denial of Service: User-controlled values influence loop conditions;,5,1,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.07692307692307693,0.0
R_yWRsR2tIRhTBTSF,6217,Group2,Not really,As part of University projects,As part of University projects,75:107,0.0,slice,"The code is vulnerable for sql injections, as it accepts ever string. Harmful strings could be inserted and executed as code.",3,1,177;271,0.0,full,"The code does not use secure methods for encrypting and hashing passwords, which makes it vulnerable to brute force attacks. Additionally, the code does not check if a user has permission to access certain resources, leaving the system open to securi",3,1,67;86,0.0,slice,Potential vulnerabilities in this code include potential misuse of the RequestDataValueProcessor and the possibility of a malicious user manipulating the servletRelativeAction parameter.,4,1,795,0.0,full,Path traversal: The code does not filter inputs,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.0,0.0
R_10xCrQJf9f4abHf,6532,Group6,Not really,As part of University projects,No experience,120,0.07692307692307693,slice,"This step will skip multiple ""/../"" between legitimate directories. e.g. ""/legitimate/../../../../somewhere/else"". This allows behaviour to escape the constrained directory.",2,4,190,0.0,full,"Line 190 not verify the empty role case. e.g. roles = "",,,,,,user1,user2"";",5,1,468,0.0,full,Does not check the request acquire from line 466,5,1,0,0.0,slice,Did not find any vulnerabilities.,5,1,Disagree,Strongly disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.038461538461538464,0.0
R_2ScRpvy5ctbp3cZ,5595,Group1,Yes but in another programming language at a Company,No experience,No experience,432;466;468;515,0.07692307692307693,full,"432 - the invalidated uri is being used to process a request
466,468 - path is used to write files and only the starting and ending of the path is checked to ensure it
515 - path is being used to look up data
",4,2,93,0.0,slice,93 - this line uses the size of credentials provided by the user to update which can be controlled by the user,4,2,348;443,0.0,full,348 - stored variant(data is being written); 443 - contains similar request response as shown in the slides,4,2,109;187;228,0.0,slice,109 - the variable pos in the while loop is obtained from the header which can be modified by the user and exploited; 187 - again an array is created using the pos variable; 228 - the same variable in 187 is used to modify another array here,4,2,Strongly disagree,Disagree,Strongly agree,Strongly agree,Disagree,0.0,0.038461538461538464
R_3oMWMMofLc5zJW8,5532,Group2,Yes but in another programming language at a Company,Developed project(s) using Java outside University,No experience,79;86;119,0.15384615384615385,slice,Information Disclosure,4,1,210;285,0.0,full,Information Disclosure,4,1,73;87,0.25,slice,Gets an input from an HTTP entity but does not check validity ,4,1,561;398;749,0.0,full,large number of requests,4,1,Disagree,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.20192307692307693,0.0
R_A1iznoOlyYPXAcN,6059,Group4,Yes in Java at a Company,Developed project(s) using Java outside University,No experience,479;466;468;515;926,0.0,full,"The mentioned line numbers are vulnerable according to me as the functions corresponding to these involve taking a path string as an input, which indicates a path traversal type of vulnerability for attackers leading to information disclosure. ",4,5,162;163,0.0,full,These lines could lead to information disclosure in the case when the user is not authorized and debugging is enabled.The attacker could get access to unauthorized information through the debug log messages,4,4,74;76;91,0.5,slice,"The above mentioned lines are vulnerable according to me since with the help of these lines, the attacker can develop code for the target system and execute it as well. This could enable the attacker to exploit the cross site scripting vulnerability ",4,4,253;55;56;121,0.0,slice,The above mentioned lines are vulnerable since the attacker could exploit the opportunity of Denial of service attack by providing headers which are massive in size which could exhaust the memory of the system causing Denial of service,4,4,Agree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.25,0.0
R_TjiKgBHjAIZMtUJ,5900,Group6,Not really,As part of University projects,No experience,76;115;117,0.07692307692307693,slice,"Vulnerability is in the definition of the function normalize(). It checks if ""/../"" is not present in the path and if it is present at the start of the path. It does not check if it is present after the first index of the path, which can be the case.",2,4,151;153,0.2,full,The password is not validated before checking for equality. A code could be written in the password which could be executed by the system.,5,2,441;445,0.25,full,URI is asked as input which could contain an SQL query as a vulnerability. This is possible because only HTML escape sequence is checked to eliminate queries in the code.,5,2,151,0.0,slice,The header value is read over multiple lines. Attacker can load the header with infinite data and the while loop will never end which can deteriorate the service.,4,3,Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.038461538461538464,0.225
R_1HczsgzZIbddmiw,6776,Group5,Not really,No experience,No experience,479;854;927;928;930,0.07692307692307693,full,"In line 479: If `context == /.` and `path == ./dic`. 
In line 854: The `normalized` variable could be `../dic`.
In line 927: Should normalize the path
In line 928: If the `hostName` end with `/..`
In line 930: If the `hostName` end with `/../`
",3,3,87,0.2,slice,In line 87: If `credentials == null`,4,2,87,0.0,slice,In line 87: The `getRequest()` were not validated.,3,3,422;749,0.0,full,After line 422: There should be a `finnally`  In line 749: There is no limitation for the `buf` size,4,2,Disagree,Agree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.1,0.038461538461538464
R_3CDDaEJY5t6lVOt,6779,Group4,Yes as a Research Assistant at University,No experience,No experience,239;397;,0.0,full,it uses getPath() method to get path from use then may be attacked by malicious path by the hacker.,4,3,144;151;235;250;,0.4,full,use get(username) and getPassword from user,2,5,87;,0.0,slice,use getRequest() and no check,2,5,76;111;156;175;211;,0.0,slice,"the code :if (pos &gt;= lastValid), it may be attacked by endless information",5,1,Strongly disagree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.0,0.2
R_3DdKtrw72Czi6dl,6701,Group1,Yes but in another programming language at a Company,No experience,Find vulnerabilities outside university,483;,0.0,full,"483. getJNDIUri(hostName, fullPath) does not validate the hostname and fullpath arguments, these strings can these can contain ""/../"" path traversal attempts",4,2,87;,0.2,slice,"87. credentials variable can be null, and will lead to null exception when executing credentials.getBytes()",3,3,447;,0.0,full,447. The queryString is appended to the request action without any checks this can lead to reflected XSS,5,4,190,0.0,slice,190. If there is no constant.LF character in the header data then the while will never end. Infinite loop denial of service,4,5,Strongly disagree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,Disagree,0.1,0.0
R_3g72Bh1Q0ab0NX3,7098,Group3,Yes but in another programming language at a Company,Developed several projects using Java,Find vulnerabilities outside university,76;107,0.07692307692307693,slice,"The code of method 'normalize' might be vulnerable, because it is a potential source of path traversal attacks if not properly implemented. The attackers can figure out other ways to bypass this method not just use ""/../""",2,4,59;66,0.2,slice,The line 59 is potencial vulnerable bacause username can be a SQL injection which depends the implementation fo principals; The line 66 log function might be an Information Disclosure if the log configuration is wrong in some places.,2,4,360;364;365,0.0,full,"In line 360, the code gets an input from an HTTP entity request parameters and does not check the input for validity – Echoes it back to the browser (line 364,365)",3,3,747,0.0,full,the buffer size is decided by user,4,1,Agree,Agree,Strongly agree,Strongly agree,Agree,0.13846153846153847,0.0
R_2ARP5Th2dbgjHdO,2908,Group2,Not really,No experience,No experience,82;111;121,0.0,slice,"82; if the question mark is added after the index it might mix the substring
111; 121; if there is some error occurs there is no error control
",4,1,68;75,0.0,full,there is no control if the action dor action and url,4,3,88;,0.0,slice,there is no security header,4,1,-,0.0,full,---------------------------------------------------,4,1,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.0,0.0
R_PUMvqw8JsnRr2KZ,12150,Group4,Not really,No experience,No experience,348;483;860,0.07692307692307693,full,"For line 348, ""path"" wasn't normalized and it could include  /../. 
For line 483, ""fullpath"" and ""hostname"" were obtained from context and were used in function getJNDIUri(). They might be harmful. 
For line 860, all the /../will be  deleted.",3,1,151,0.2,full,"For line 151, if the credentical is null, the code throws  null pointer exception and the password will be diclosed. ",4,2,73;74;87;89,0.5,slice,The input was not checked for validity.,3,2,73;109;151,0.0,slice,"For line 73, 109, 151, the loops are controlled by the user's input.",4,1,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.25,0.13846153846153847
R_W7k3JDCc3sNrTpv,7395,Group5,Yes in Java at a Company,Several years of professional experience with Java,Several years of professional experience outside of university,928;930,0.0,full,"Path concatenation should be done by using the path = normalize(path);
",3,5,62,0.2,slice,"It seemed like validated = (digest(credentials).equalsIgnoreCase(principal.getPassword())) can lead to a user with username ""Bob"" can login as another user with username ""bob""",3,5,88,0.0,slice,if ((processor != null) && (request instanceof HttpServletRequest)) might lead String action to be returned unmodified,3,5,398,0.0,full,byte[] tmp = new byte[newsize] might lead to DoS because it will try to create an array with the size of input to the method,4,4,Agree,Agree,Neither-Agree-nor-Disagree,Strongly agree,Agree,0.1,0.0
R_2UW6uIi5tBAaZhG,4413,Group2,Yes but in another programming language at a Company,As part of University projects,No experience,110;111;91,0.0,slice,It  attempts to validate the input by whitelisting,4,3,"208,58,64",0.0,full,geg information and retrieves database information using a new user details,3,3,"86,89",0.0,slice,Parameeter ijection takes place here and we must prevent it to attack end user databasees,3,3,"110,200,356,700",0.0,full,kill server by filling memory and  the user has control over the loop counter,5,1,Neither-Agree-nor-Disagree,Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.0,0.0
R_2usar1UzVHlXCYq,4979,Group4,Not really,As part of University projects,No experience,206;368;458;505;543;860,0.15384615384615385,full,"1.receives a /path/to/sensitive/data/... /etc/passwd URI, it will be parsed as /etc/passwd.2 for the function normalize():if index2 is equal to 0, i.e., it tries to go past the root of the application based on this path, it will simply return null.",3,4,144;195,0.2,full,"144:we dont know if there is security problem in class GenericPrincipal.195: pwd directly store in GP instead of encrypting them using methods such as hash functions,",3,4,86,0.0,slice,"Instead of being vulnerable,the processAction method uses RequestDataValueProcessor to process the Action property of the form, which also increases the protection against XSS attacks.",5,2,51;73;109,0.3333333333333333,slice,the loop may be killed by user;the sever may be filled all of its memory,5,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.16666666666666666,0.17692307692307693
R_1ONWDLYvUhBcCyw,2569,Group1,Not really,As part of University projects,As part of University projects,"926, 928,930",0.0,full,HostName is not being sanitized and the in put is used directly ,2,2,"66,86 ",0.0,slice,user name is loged in the debag logs on 66 and getDigestEncoding is only pulling data but there is no verification if the data actualy matches ,4,3,482,0.0,full,writeHiddenFields are being rewriten because the processor is not null but the actual data is not checked and new request is appended ,4,2,"220, 187 ",0.0,slice,if the chr is not enough to stor [pos] it will crush the program as the buffer will be to small to handle the data since the chr was incremented on 187 although there are checks they dont do any thing as chr is incremented ,4,3,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.0
R_1CvDaGXw181376N,3218,Group3,Yes but in another programming language at a Company,As part of University projects,Several years of professional experience outside of university,76,0.07692307692307693,slice,76: the path is always assumed to be valid whereas normalize function might return null,3,2,65; 62; 93,0.2,slice,"65: Validated is not explicitly initialized as false before the check is performed, 62: if plaintext string ends up being compared, can't ignore case; 93: wild guess that the md refers to MD hashing algorithm which isn't secure",4,1,450,0.25,full,"The requestUri doesn't have any validation; thus, technically requestUri can be anything",5,1,463,0.3333333333333333,full,"Even though the request size check is done, it's only after the headers parsing, meaning that request with large number of header swill block the application at the parsing step",5,2,Strongly disagree,Agree,Agree,Strongly agree,Agree,0.13846153846153847,0.29166666666666663
R_3sjKL1XnVZbHWCY,4065,Group1,Yes but in another programming language at a Company,As part of University projects,As part of University projects,860;549;517;483,0.07692307692307693,full,"The normalizer function can be outplayed by giving an input string like ""/./.././"", since it will still contain the ../ sequence after it runs (line 860). Because of this, the functions using it will be prone to path traversal attacks.",4,2,94,0.0,slice,"If the user can supply a password which will cause an exception during the digest method, then the function will return the password string to the given username",3,3,468,0.0,full,"If there is no 'action' or 'relativeServletAction' configured, then this runs for the URI supplied by the user - this can be exploited with malicious input",3,4,177;196,0.0,slice,"If the header is too long, or contains no endline character (can be removed intentionally), then the buffer will continously grow in size, taking up resources and preventing others from normally using the service.",4,2,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.038461538461538464
R_1pzWIjUWipQCCsp,4087,Group6,Not really,Developed several projects using Java,No experience,479;483,0.0,slice,The path variable in input is used to construct a full path in line 479 that then is used to produce an URL in line 483,2,3,66,0.0,full,There's a log.debug that leaks information about the authentication of the user,2,4,445;447;468,0.0,full,"The query in input in the first line is then used to condtruct a request in line 447, only checking if it has text in it, and it's then executed in line 468",2,4,164;165;166,0.0,slice,"given the code is inside a while(true), if the chr check at line 165 is always true then we can increment the value of pos, eventually exausting the size of the buffer in line 164",4,3,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.0,0.0
R_2AYHaVrrkG7DUMi,4935,Group6,Not really,Developed several projects using Java,As part of University projects,200;,0.0,slice,"No sanitization of the uri, while it is done in line 368",3,4,59,0.0,full,Specific cafted input can be used to inject malicious code when retrieving principal object via username,3,4,447,0.0,full,the query string is not sanitized,4,2,51,0.3333333333333333,slice,not handling other states of HeaderParseStatus like HeaderParseStatus.NEED_MORE_DATA,5,2,Neither-Agree-nor-Disagree,Disagree,Agree,Disagree,Disagree,0.16666666666666666,0.0
R_9vPPjtbXjzBJVZf,5528,Group1,Not really,Developed several projects using Java,As part of University projects,468;471,0.0,full,"An attacker could provide an malevolus input stat starts with the path in line 462, so the code will create a file with this path and then execure the toURL method on this file",3,4,87; 93;94,0.2,slice,"the password (credentials) isn't truelly verified in the method digest because also if the credentials string is null the update and return true is always done, so always return true, and always in the second ""if"" and access",3,3,466;468,0.0,full,there is no controll of the request process,3,4,83;,0.0,slice,"the buffer has the size of the parameter pos, so an attacker can ""kill"" the server by filling all of its memory",5,1,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.1,0.0
R_1M4KbPNoKbgUaoS,5841,Group5,Not really,Developed several projects using Java,As part of University projects,348;349;926;928;930,0.0,full,"The provided path string in the input parameter is not normalized but instead it's being used directly.
Regarding line 348, I'm not sure if the File class takes into account the path traversal in a string or if by default it ignores it before parsing",4,4,62;87;89,0.4,slice,"It doesn't check nullity on the provided password string, therefore it could escalate only knowing username",3,5,69,0.0,slice,"evaluate method could execute arbitrary commands given by action string, probably provided by the user",4,4,103;433;747,0.0,full,"Buffer length can be arbitrary large, taking much resources by the system",5,3,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.2,0.0
R_1MYx1qVFDv1l17o,5894,Group5,Yes in Java at a Company,Developed project(s) using Java outside University,Find vulnerabilities outside university,857,0.0,full,"In that line, the index of the first ""/../"" is checked only to be equal to 0, this means that the normalize function returns null only if the ""/../"" is found at the beginning of the path, otherwise it doesn't recognize the exititing of context",2,5,93,0.0,slice,"the md variable in line 93 (that i can't know what is used for) is updated with the given credentials even if the login fails, so i can assume that the credentials of a given principal can be updated even if the check on line 62 fails. ",3,5,88,0.0,slice,"In the processAction, the action is always processed, so any action inserted by the user is processed. This is because the processor and the request evaluate line 88 always to true.",4,3,393;394;395;397;398;399;400,0.0,full,"The lines 397;398;399;400 should be in the else of the if at line 392. if newsize is bigger than buf.length and if the parsingHeader is false at line 393, the exception is not thrown, and the code goes on without limits on newsize",4,4,Agree,Agree,Strongly agree,Agree,Neither-Agree-nor-Disagree,0.0,0.0
R_Y5rwBS1lTyPHz8J,5912,Group2,Yes but in another programming language at a Company,As part of University projects,As part of University projects,76,0.07692307692307693,slice,"The documentation of the normalizing function specifies that it should return a sting beginning with the character '/', but it is not checked, and that all the paths of the form ""/./"" should be simplified, but they are not.",4,4,292;300,0.0,full,The logs when not in debug mode could lead to an information disclosure,2,5,69,0.0,slice,The action provided by the user is evaluated and processed without checking it,2,5,461;462;463,0.6666666666666666,full,The user can control how much time is spent parsing headers,4,3,Strongly agree,Agree,Strongly agree,Strongly agree,Agree,0.038461538461538464,0.3333333333333333
R_2R9umIz9CqFq5vd,5908,Group4,Yes but in another programming language at a Company,As part of University projects,No experience,348;859,0.07692307692307693,full,"Line 348: in ""getRealPath"" function the ""path"" is not normalized
Line 859: the function ""lastIndexOf"" gets the last index of '/' starting from ""index - 1""; can result in removing from ""/../"" until the last '/' in the string destroying the path.
",4,2,195,0.0,full,No sanitization of username string is performed before creating the user,4,2,70;91,0.0,slice,"""resolveAction"" could return the same input string ""action"" to the browser if no {RequestDataValueProcessor} instance is configured for it",2,4,73;109;151,0.0,slice,There are no limits set for buffers during headers parsing; potentially sending a packet with a huge amount of headers could cause a DoS if memory is limited.,3,4,Disagree,Agree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.038461538461538464
R_2EclKCymUWSTFba,6330,Group1,Not really,As part of University projects,As part of University projects,482;483,0.0,full,I think that these lines of code are vulnerable because the code takes as input a path and replies with an URL to that resource. It could be possible for an user to input a specific path that will be processed by the code uncorrectly.,5,3,62;87;90;93;94,0.6,slice,I think that this is the vulnerable line of code because it starts manipulating an input string (credentials) without any sanitization or check (except for the != null). This could allow an user to insert malicious input that will be read by the code,3,3,441;442;443;444;445;447;451,0.75,full,I think that these are the vulnerable lines of code since we manage an input to craft a response without checking it or sanitizing it,4,2,51;83;118;164;187;220,0.3333333333333333,slice,I think that these are the vulnerable lines of code since we allcoate memory and/or use loop constructs based on values that are not sanitized and this could lead to big memory consumption or crahes,4,1,Disagree,Neither-Agree-nor-Disagree,Strongly agree,Agree,Neither-Agree-nor-Disagree,0.4666666666666667,0.375
R_2sYlS14Lj9krI8j,6240,Group3,Not really,As part of University projects,No experience,114;115;95,0.15384615384615385,slice,"The path that I am parsing may be too long to fit into the Integer limit, giving an integer overflow resulting in a normalization skip if the /../ sequence is after this limit.",4,1,87;90;62,0.6,slice,credentials can be a null string,3,2,435;437,0.0,full,a script tag with code can be inserted in the servletRelativeAction when concatenetad with the read path,4,1,218,0.0,full,there is so much weird parsing going on that there may be an indexOutOfBounds exception raised when reading the buffer somewhere,5,1,Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Strongly disagree,0.3769230769230769,0.0
R_3jSXp2GMN7pdqBb,6197,Group4,Yes but in another programming language at a Company,Developed several projects using Java,As part of University projects,859;860,0.15384615384615385,full,"The method normalize does not properly remove ""/../"" occurences, e.g. a/../../b/c throws an error IdxOutBounds
On line 859 I would use indexOf intead of lastIndexOf and fix accordingly line 860.
This problem affects all methods that call ""normalize"".",3,5,148;277;151,0.2,full,"In athenticate, hasMessageDigest() leads to case-ins. password check. In digest, if !hasMessageDigest(), the password is returned unchanged. So, if the value of hasMessageDigest changes between the two calls =&gt; case-insensitive plain password check.",5,2,73;76,0.5,slice,"Line 73 gets the request URI (can be manually changed from the user), ""sanitizes"" it by calling encodeURL and nothing more. The value passes to processAction can still have malicious content.",3,4,177;190,0.0,slice,"At line 177, the program loops until it finds exactly a line feed character. What if there is none? This could lead to an exception or infinite loop, e.g. NEED_MORE_DATA =&gt; while(!eol) =&gt; NEED_MORE_DATA ...",5,3,Strongly agree,Agree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.25,0.17692307692307693
R_3fDD5GzDzOlHRSG,6030,Group2,Not really,As part of University projects,No experience,114;115;116;117;118;76;95,0.23076923076923078,slice,"normalize checks if ""/../"" appears at the beginning of the string but it doesn't check if ""/../"" appears in other parts of the string,which could lead to a path traversal. Line 76 normalize is called and line 95 returns object based on unsafe path",2,4,"144;186;187,188;189;190;191;195",0.2,full,Line 144 - Injection: the function authenticate accepts user input without sanitization and uses it to access the data storage. Lines 186-191 and 195 - Injection: the function addUser doesn't sanitize the inputs and adds them to the storage,4,3,87;70;76,0.25,slice,line 87: the function processAction calls getRequest() and returns a String based on the input received. Line 70;76:  processAction is called thus causing a potential XSS attack.,4,2,103;,0.0,full,"In line 103 headerbufferSize is set to a number provided by the user. If we don't run some checks ont the value, the buffer could end up taking all the memory available, thus compromising the execution.",5,3,Disagree,Strongly disagree,Agree,Agree,Strongly disagree,0.2403846153846154,0.1
R_pnMeooI8MkFdcf7,6269,Group3,Not really,As part of University projects,No experience,81;95,0.15384615384615385,slice,The input 'path' taken from a user is used to construct a path,3,3,62;87;90,0.6,slice,"If credentials=null, digest may throw null reference exception.",3,4,441;442;445;447:451,0.5,full, We get a query string in the request conext and we don't check its validity,5,2,230,0.0,full,the variable pos used in many if conditions and while loops is not initialized,5,2,Neither-Agree-nor-Disagree,Disagree,Agree,Agree,Disagree,0.3769230769230769,0.25
R_3m1ClGfJN3xbfGu,6490,Group3,Not really,Developed several projects using Java,No experience,86;95,0.07692307692307693,slice,At line 86 we assign a tainted variable to queryString which is used then in application wrapper at line 95,3,3,87;90,0.4,slice,At line 87 and 90 we call the function getBytes() on credentials variable that can be null since no check is performed. So it may throw a null reference exception with potential information disclosure.,3,3,347; 441;444,0.5,full,At line 441 a value from the context request is assigned to requestUri and it has not checked so an attacker can redirect the user to a malicious page since this value is set as the action of the form in the line 347,4,2,0,0.0,full,No vulnerability has been found,5,1,Agree,Agree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.23846153846153847,0.25
R_pgdIS3evHx2mDhT,6293,Group6,Not really,As part of University projects,As part of University projects,849;859,0.0,slice,"849: finds only one occurrence of ""\\""
859: if I'm not misinterpreting ""lastIndexOf"", the normalizing procedure just cuts off most of the path",4,2,361;59;95;87;77;66,0.0,full,"361: hardcoded string; 59: we get the user before controlling the credentials; 95: no catch; 87: could cause exception, not handled; 77: we should not return the plain credentials; 66: information disclosure on success of authentication",4,3,429;437,0.0,full,"429: an evaluate on user input is executed, could be an injection;437: user path not sanitized",4,2,235,0.0,slice,"There is a buffer that is never resized, we could go beyond its boundaries. 235: we try to put data in the buffer, but the data may be too large",4,1,Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Disagree,0.0,0.0
R_9FWi0slEmQdiJ2h,6596,Group6,Not really,As part of University projects,As part of University projects,361;366,0.0,slice,It is possible to insert a path that starts with / and read or write to other locations. The validation just checks the first character and not the other ones.,3,3,58,0.0,full,"There isn't any check on the credentials. If the user inserts a null value, this could generates a null reference exception error",4,3,426;433,0.0,full,No check on the value of the attribute,5,2,88,0.0,slice,No check on the size of the buffer. Increasing by one could lead to buffer overflow,5,2,Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Strongly disagree,0.0,0.0
R_3C7ryRNz1f5rsUF,6555,Group3,Not really,As part of University projects,As part of University projects,116,0.0,slice,"This line takes only into account ""/../"" and not ""../""",5,1,"90,93",0.2,slice,no checks if the credentials are null or not,5,1,466,0.0,full,Due to my lack of knowledge I cant answer correctly,5,1,6,0.0,full,Due to my lack of knowledge I am unable to answer,5,1,Strongly disagree,Strongly disagree,Agree,Neither-Agree-nor-Disagree,Strongly disagree,0.1,0.0
R_3lJgDVpBH9TmMF8,6567,Group4,Not really,As part of University projects,As part of University projects,854;864;860;463,0.23076923076923078,full,"The /../ payload could be URL encoded and the indexof method could not find any occurrence.
In addition the 463 contol is not sufficient so you can create a malicious .jar file.",5,1,195;159;163,0.0,full,"In line 195 there is no validations on username, password when genereting a GenericPrincipal. In the lines 159 and 163 there is an information disclosure of the username on the debug lo",4,1,67;74;89,0.25,slice,Encoding in URL is not a efficient sanitization of the value inserted by the client. The normal action string are sanitized correctly with the method evaluate but the ServletRelativeAction not! So this is a entry point for XSS attack,4,4,70,0.0,slice,The code lacks the check for a blank line that signals that the header parsing is done,5,1,Disagree,Neither-Agree-nor-Disagree,Agree,Disagree,Disagree,0.125,0.11538461538461539
R_pc3oz4BPPrQakyB,6675,Group2,Not really,Developed project(s) using Java outside University,No experience,119;120,0.15384615384615385,slice,"if the last index of '/' is in a position in the string after a sequence of the type '/../', the latter would be kept anyway in the final string, therefore an attacker could navigate unauthorized upper layers of the service directory.",5,1,153;,0.0,full,"if the credentials are null, then validated = (digest(credentials).equals(principal.getPassword())); will return gibberish and validated will assume a non null value passing the check if (validated) on line 157",5,1,73,0.25,slice,if the requestUri contains &lt;script&gt;js code&lt;/script&gt; this potentially malitious code will be executed client-side. The input is not sanitized neither is the processAction function that is subsequently invoked.,5,1,103;747;749,0.0,full,no contraints or upper bounds to the instance variable headerBufferSize. In the line 749 we create buf = new byte[bufLength]; but since bufLenght does not have upper boundaries the size of this array could become too big to handle.,5,1,Strongly disagree,Strongly disagree,Strongly disagree,Agree,Strongly disagree,0.20192307692307693,0.0
R_3R935OVHA5w1rmf,6739,Group3,Not really,As part of University projects,As part of University projects,76;118,0.07692307692307693,slice,"If there is a path traversal attempt the normalize method return null. However, in getRequestDispatcher before performing other operations is not checked  if the returned value is null or not.",4,3,62;87;90;94,0.6,slice,Nowhere in the code the credential parameter is checked to see if it is null or not. If that attribute is equal to null then during the comparison with the stored password (line 62) an exception will be raise.,3,3,435;437;438;468,0.0,full,"If a user configured a ServletRelativeAction value then the value is prepended with the context and servlet paths, and the result is used and displayed in the page, without any validation or sanitization of the input.",4,2,1,0.0,full,I don't know. I was not able to find anything,5,1,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Disagree,0.3384615384615385,0.0
R_6ieAUOhgZrNapTH,6771,Group5,Not really,As part of University projects,As part of University projects,82;83;155,0.0,full,"In line 82 and 83 the attributes are set equals to the context variables, which can be manipulated by user. In line 155 function getresources is called on the attribute context",4,2,87;90;93,0.4,slice,"As stated in comment before digest function, if any exception is thrown , the credentials in plain text will be returned, exposing really sensitive information. ",4,2,66;69;70;89,0.0,slice,"First the action input from the user is stored in attribute action of code without being sanitised, the it is processed",4,2,103;747,0.0,full,the headerbuffersize is first set to a value inserted by the user and following is used to calculate the bufLength,4,2,Disagree,Agree,Agree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,0.2,0.0
R_bOVyCEQJ7qvcIOB,6486,Group5,Yes as a Research Assistant at University,Developed several projects using Java,Find vulnerabilities outside university,928;930;483,0.0,full,"The normalization function itself is fine.

However, in this particular place, the input is not normalized.",5,2,65,0.0,slice,"The value of validated is not set / reset. If you login as a legit user, it becomes true. Logging in with an arbitrary non-existant user does not execute 62, so validated stays true and null is returned.",4,2,69;70,0.0,slice,"In this section, the code blindly trusts the user's input and returns it to process it. The action value can be modified in the POST request.",1,5,805;413,0.0,full,"A blocking read is performed with an alleged timeout (timeout=true). However, In the function readSocket it becomes evident that the timeout parameter is never used. Thus, the blocking read is never timed out and can be left pending by the user -&gt;DOS",5,2,Disagree,Disagree,Strongly disagree,Neither-Agree-nor-Disagree,Strongly disagree,0.0,0.0
R_9BtIcFBsoUnixxv,6822,Group1,Yes in Java at a Company,Developed several projects using Java,No experience,208;225,0.0,full,"""uri"", thus ""mapuri"", thus ""child"" path is not normalized. This could be exploited with a path traversal attack.
",3,1,62;89;90;91,0.4,slice,"62: when comparing password we should not use equalsIgnoreCase. 89:90;91 Since it is a try wihout a catch, the exceptions will not be captured. A possible DoS attack can be achieved with a big digest",3,3,445;447;451;468;470,0.25,full,"""queryString"" it is used in ""processAction"" without some proper validation. This can be exploited with a XSS attack",3,3,50;51,0.6666666666666666,slice,"there is nor a limit on the number of headers to be ""parsed"" now a maximum header size. As a result this can be exploited for DoS attack by performing a request with many HTTP headers or with a very long HTTP header ",3,5,Agree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Disagree,0.5333333333333333,0.125
R_3CPBG9jpkpxs4ev,7006,Group5,Not really,As part of University projects,As part of University projects,348;349,0.0,full,in the function getRealPath the input path is not checked and then is used to create a new file object that is returned to the user,4,2,90,0.2,slice,"the ""credentials"" variable is not check, if for example is null then the function will throw an exception that is not handle by the code because there is no catch after the try",4,1,66;70,0.0,slice,"the content of the variable ""action"" is not check and then used in the processAction function to process the action based on the input string ""action"" that has not been checked",4,1,103,0.0,full,"the method is public so the user can choose the value to give to headerBuferSzie in the program since the input the is assigned to the ""this.headerBufferSize""",5,1,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Disagree,0.1,0.0
R_2SqOppb73i9h0Eo,1583,Group1,Yes in Java at a Company,As part of University projects,As part of University projects,368;458;543,0.07692307692307693,full,"The ""normalize"" function seems fine, but the usage is not correct: it should be called before the validation process, not after.
At line 505 it is used in the proper way, before the check: if (!path.startsWith(""/""))
Ex: ""\etc\passwd\"" will pass",2,5,65,0.0,slice,"Validated is not declared In local scope, so I can reuse the previous value from the global scope if I just put a non existent username, need to reset it",2,5,;,0.0,full,I didn't get the use of evaluate,4,1,83;118;137;164;187;220,0.0,slice,"No controls on pos index, could be an infinite loop that leads to a waste of resource",3,3,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Agree,Agree,Neither-Agree-nor-Disagree,0.0,0.038461538461538464
R_2isV4zPp3WUqKRD,2622,Group5,Yes in Java at a Company,Developed several projects using Java,No experience,466;468;471,0.0,full,"never validated where the gerResource request came from, could be an attacker that now can access files",5,3,59;62;93,0.4,slice,Here data is asked of a user but never checked for validity,4,3,66;70;89,0.0,slice,The action is never validated for malicious activity and is processed,4,3,392;399,0.0,full,The buffer is expanded but newsize is never validated,5,3,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.2,0.0
R_8tqCeUALRGIrtE5,2981,Group6,Yes but in another programming language at a Company,As part of University projects,No experience,76;93;111,0.07692307692307693,slice,The application can be tricked into reading or writing files at arbitrary locations,5,2,151;153;196,0.2,full,"User input isn't sanitized for special characters, commands can be injected.",5,2,447;451,0.25,full,Code can be injected using the queryString variable,5,2,50;51,0.6666666666666666,slice,DOS can be achieved by overloading the parsing method with a large amount of long headers. Header size is only checked after parsing.,4,4,Disagree,Neither-Agree-nor-Disagree,Strongly agree,Strongly agree,Neither-Agree-nor-Disagree,0.3717948717948718,0.225
R_2jAQqnAKnSgyf4w,3007,Group6,Yes but in another programming language at a Company,As part of University projects,As part of University projects,108;120,0.15384615384615385,slice,the path is modified and after modification it is not validated.,3,3,196,0.0,full,data is being written into the database which can have special characters,3,2,444;447,0.25,full,query string is being echoed back to the browser unchecked,4,2,73;221,0.0,slice,user controlled allocated memory and loop conditions,4,2,Agree,Neither-Agree-nor-Disagree,Agree,Agree,Agree,0.07692307692307693,0.125
R_8xe8PTr1XL38IaB,4853,Group5,Yes but in another programming language at a Company,As part of University projects,Find vulnerabilities outside university,373;392;396;407;408;419;421;422;429,0.0,full,"Inside the ""getRequestDispatcher"" function, the object of the mappingData gets recycled at the end of the function, however this part may never be reached by the catch statement on line 419 where the function gets returned, there is also no final {}",4,3,62;65;85;86;87;89;94,0.4,slice,Bytes inside the digest function can be returned as null and function of authenticate does not return a value for all paths.,3,2,68;72;73;74;76;76,0.75,slice,"When the action string has no text, the requestUri gets processed without evaluation, it does get encoded but not evaluated.",1,5,569;660;661,0.0,full,"Inside parseHeader(), the headerData only gets recyled in the end of the function, but the function can be returned at an earlier point.",5,2,Agree,Disagree,Agree,Agree,Agree,0.575,0.0
R_8UvXGyj7xfN3jmp,4912,Group3,Yes in Java at a Company,Several years of professional experience with Java,Find vulnerabilities outside university,79;87;111;114;119,0.23076923076923078,slice,"With the normalized.replace, the attacker can replace with some other path to gain access to files. The parameters pos, semicolon, index, and index 2 all take values depending on user input directory which the attacker can manipulate.",4,3,59;62;93;94,0.4,slice,"In line 59 and 62, the get function for username and password can be appended with an SQL command to get the user's credentials. In like 93 and 94, the attacker can use string operations update and convert to delete or update user data.",4,3,466;480,0.0,full,The request tag in both processAction and doEndTag methods use the getRequest() method which can be used by the attacker for an XSS attack,4,3,398;749,0.0,full,Both lines 398 and 749 take user inputs as array size which can be used to overflow the server and cause DoS.,5,3,Agree,Agree,Agree,Agree,Agree,0.3153846153846154,0.0
R_2OUcMW9QDVNt7jo,5321,Group2,Yes but in another programming language at a Company,As part of University projects,As part of University projects,86;92,0.0,slice,path.indexOf(';') can return 0.  pos - semicolon can be negative causing buffer overflow,3,3,180;195,0.0,full,the string are not validated before new user credential are added to the xml,3,3,74;87,0.25,slice,requesturi is not validated before using as argument,3,3,459;424,0.3333333333333333,full,"socket not closed, not sure about it. little unclear on the correct assement",5,1,Disagree,Agree,Neither-Agree-nor-Disagree,Agree,Neither-Agree-nor-Disagree,0.125,0.16666666666666666
R_8q8DkOhOWMoMGYN,4305,Group6,Not really,As part of University projects,No experience,114;119,0.15384615384615385,slice,"These codes don't process with the starting of the path. If the path begins with ""/"", that will access the root of the system.",4,2,321,0.0,full,This code doesn't check whether the path which user inputs is in valid realm.,5,1,345;429;467;468,0.0,full,These codes don't check whether the actions from tags are valid.,5,1,55,0.0,slice,"If the request header is too large, it may overflow the buffer and leads to DOS status.",4,2,Strongly disagree,Disagree,Neither-Agree-nor-Disagree,Agree,Strongly disagree,0.07692307692307693,0.0
R_2kOvRCfl8uLkwcp,7015,Group1,Not really,Developed several projects using Java,As part of University projects,944;910,0.0,full,Path traversal bug,5,2,86,0.0,slice,information disclosure bug,5,2,466,0.0,full,Cross-Site Scripting (XSS):  getRequest,5,2,56,0.0,slice,Denial of Service Connections are never closes if the updates have a problem and eventually the server runs out of steam,5,2,Neither-Agree-nor-Disagree,Disagree,Neither-Agree-nor-Disagree,Neither-Agree-nor-Disagree,Disagree,0.0,0.0
R_8PXmB8o9Ld76pye,7253,Group4,Yes as a Research Assistant at University,As part of University projects,No experience,348; 349,0.0,full,"In the getRealPath() function we are allowing an attacker to get the absolute path to virtually any resource in the host which allows the attacker then to no longer require ""/../"" to get resources even if the normalize() function is used later on.",2,5,147;148;149;150;151;152;153;154;155;156,0.4,full,The attacker could brute force his way into finding out the passwords of other users by analysing the output of the authenticate() function,3,4,73;74;87;89,0.5,slice,This implementation allows for cross-site scripting where the attacker can inject their own script into the website and access web data outside of their path in a non-restricted fashion.,4,4,52;177;187;201;209;235,0.0,slice,"An attacker could feed a potentially endless multi-line header, leading the process to a buffer overflow or a memory drain due to the fact that the check for the input size to not be too large is validated only after the parseHeaders() function ends.",3,3,Neither-Agree-nor-Disagree,Agree,Agree,Agree,Agree,0.25,0.2
